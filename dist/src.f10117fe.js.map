{"version":3,"sources":["src/config.ts","src/requests.ts","src/task1/Task1.ts","src/task2/Task2.ts","src/task3/Task3.ts","src/index.ts"],"names":[],"mappings":"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CAAA,GC+DxD,CAAe,CD/DyC,CAAA,EAAA,AC+DxD,EAAqB,GD/DmC,CAAA,AC+DxD,ED/DwD,EC+D3B,GD/D2B,CAAA,EAAA,CC+DpB,CAAC,IAArC,MD/DwD;AFA9D,ACME,AE0DI,QAAA,EF1DJ,EE0DQ,CAAC,IHhEX,ACMS,CDNT,ACMU,GAAR,CAAY,AE0DR,CAAe,IAAf,EAAqB,UAArB,IAAmC,IF1DvC,GE0D8C,CAAC,UAA3C;AHhEN,ACS+B,AEwD1B,OALD,MAKO,IFxDoB,CAAA;ADT/B,ACS+B,ACPzB,ACgEA,MDhEA,MFFE,AGkEI,EHlEJ,CAAA,IAAA,CGkEY,CHlEpB,CAAA,CGkEuB,OAAO,CAAC,ODhEO,ECgEf,CDhE0B,ACgER,CAAlB,EAAqB,QAAtC,YDhEA;ADOyB,ACNzB,ACgEA,MDhEA,MDM+B,AE0DzB,SAAS,CF1DgB,CAAA,CE0Db,OAAO,CAAC,EDhEE,GAAW,EDMR,EAAN,ACNzB,CDMyB,AE0DzB;AD/DA,ACgEA,MDhEA,MCgEM,IAAI,GAAG,GDhEG,GAAY,CCgER,CAAC,EDhErB,OCgEa,CAAkB,CAAlB,EAAqB,UAAlC;AD/DA,ACgEA,GHtEwB,CAAA,EEMxB,MCgEM,IAAI,GAAG,GDhEG,GAAuB,CCgEnB,CAAC,IAArB,CDhEuC,CAAA,6BAAA,CAA8B,yBAA9B,EAAyD;AFFvG,ACMS,ACHN,ACgEI,CHvED,OEOH,EDGM,ECHF,ACgEM,EDhEJ,KDGS,GAAc,AE6DT,EF7DS,CAAA,AE6DN,IF7DM,EAAvB,CE6DwB,CF3D9B,AE2D+B,UAA3B,GDjEgG;AAEpG,ACgEI,QDhEJ,ACgEI,IAAI,CDhEH,ACgEI,EDhEF,OCgEH,GAAc,QAAA,CAAA,QAAA,CDlEkF,ACkElF,EAAA,EAAQ,IAAI,CAAC,SAAb,CAAA,GAAsB,EAAA,GAAA,EAAA,EAAO,EAAA,CAAC,QAAD,CAAA,GAAY;AHxElD,ACaT,ACJA,AC+D6D,OHxEpD,CAAA,AEST,EDIA,AE2D6D,KD/DtD,EAAE,GC+D8D,EF3D3D,AE2D2D,CF3D1D,CDbJ,GAAgB,GCazB,CAAqB,CE2DsC,OF3DtC,CAAA,GDbZ,UCaY,CAAc,YAAnC,EAAiD,IAAI,CAAC,SAAL,CAAe,SAAf,CAAjD;AACA,ACRoG,ACkE3B,ODlE9B,CAAvC,EDQJ,AE0DyE,IAAI,EAAA,IAAlB,EF1D/C,CAAC,OAAb,CAAqB,QAAA,CAAA,aAAA,CAAc,OAAnC,EAA4C,WAAW,CAAC,QAAZ,EAA5C;AAEA,ACLF,AC6DiF,MD7DjF,IDKE,AEwD+E,GD7D1E,CAAC,AC6D6E,EAAE,CFxD9E,ACLT,AC6DwF,CFxD9E,ACLE,GDKV,AEwDqF,CFxDzE,AEwD+C,gCFxD3D,CCLmC,4BAAzB,GAAqD,MAAjE,EAAyE,gBAAzE;ADME,ACHI,AC0DyF,MD1DzF,IDGJ,AEuD6F,OFvDtF,CAAC,CEuD8F,EFvDtG,AEuDwG,CFvD5F,AEuD6F,SAAD,CD1D1E,GAAG,KDGjC,CCHI;AACA,ACyDuD,MDzDvD,GCyDoC,EAA6E,EAAnG,EAAd,aDzDsB,GAAW,GAAjC;AACA,ACyDD,MDzDC,yBAAyB,GAAwB,QAAjD;AACA,ACyDH,KAdD,CD3CI,gCAAgC,GAAuB,OAAA,CAAA,wCAAA,CAAyC,gBAAzC,EAA2D;AACtH,ACyDD,GAxBD,KDjCE,IAAI,EAAE,0BADgH;AAEtH,AC0DF,MAAM,ED1DJ,IC0DU,CD1DL,EAAE,AC0DM,IAAI,GAAJ,CAAQ,IAAI,CAAC,SD5D4F,CC4DzG,CAAf;AF1DQ,ACCN,AC0DF,EAAA,IAAI,CAAC,CD1DH,EDDM,OE2DR,GAAkB,ED1DF,EAAE,CC0DK,CAAC,IF3DI,AE2DV,CAAW,EF3DiB,IE2D5B,CAAlB,OF3D0D,CAAC,OAAb,CAAqB,QAAA,CAAA,aAAA,CAAc,OAAnC,CAAtC;AACA,ACHgH,AC8DxH,EAAA,IAAI,CD9DyD,AC8DxD,CD9DC,EDGE,ME2DR,GAAiB,GF3DG,CE2DC,CAAC,CF3DkB,OAAO,CE2D9B,CAAe,IAAf,GAAsB,OAAtB,EAAjB,EF3DwC,KAAgC,QAAhC,GAA2C,QAAQ,CAAC,oBAAD,CAAnD,GAA4E,WAA5G;AAEA,ACAR,AC0DD,CAhCM,KD1BL,IDAQ,GCAD,CAAC,GAAR,CAAY,mBDAuB,GAAW,YAAtC,GCA6B,4BAAzB,GAAqD,aAArD,GAAmE,sBAAsB,CAAC,WAAvB,EAAnE,GAAuG,MAAnH,EAA2H,gCAA3H;ADCQ,ACEF,MAAA,IDFE,gBAAgB,GAAc,CCER,GAAG,YAA3B,SDFE;AACA,ACEF,ACsBK,MDtBL,CCsBK,CAAA,EFxBH,QAAQ,GAAW,EEwBhB,GDtBe,ACsBA,GDtBmB,GDFrC,GCEF,MCsBK;AFvBH,ACEF,MAAA,IDFE,UAAU,GAAW,KCED,GAAG,OAAA,CAAA,WDFyB,GAAG,KCE5B,CAAoB,EDFQ,CAAA,aAAA,CAAc,QAAjE,OCEuB,EAAsD;ADAnF,ACAqF,ACuDlF,IAAM,IDvD4E,EDArF,ECAyF,EAAE,ACuDxE,GFvDZ,AEuDe,CFvDd,GAAR,CAAY,IEuDH,UAAa,CAAC,CDvD4D,KCuD7D,EAAyB,GAAzB,EAAuF,MFvD7G;AACA,ACDqH,ACwDvH,MAAM,EDxDiH,EDCrH,MCD6H,CDCtH,AEuDQ,CFvDP,ACDuH,ECwD7G,CFvDlB,CAAY,IEuDY,CAAC,IAAP,CAAY,MAAZ,CAApB,OFvDE,EAAsC,IAAI,IAAJ,CAAS,2BAAT,CAAtC;AACA,ACFmF,ACyDrF,MAAM,CDzDyB,CAAzB,EDEJ,OAAO,CAAC,CEuDS,EFvDjB,CAAY,AEuD6B,EAA3C,yBFvDE,EAAyC,gBAAzC;ACDF,ACyDA,MDzDA,ACyDM,KAAK,EDzDJ,CAAC,ACyDM,EFrDR,CCJN,ACyDiB,CDzDL,ACyDM,KAAJ,CFrDA,EEqDY,CAA1B,CFrDkB,aAAZ,OAAA,CAAA,MCJ+B,4BAAzB,GAAqD,aAArD,GAAmE,sBAAsB,CAAC,WAAvB,EAAnE,GAAuG,YAAvG,GAAoH,oBAAoB,CAAC,WAArB,EAApH,GAAsJ,MAAlK,EAA0K,sBAA1K;ADIM,ACDA,ACuDN,MDvDM,ACuDA,MAAM,GAAa,CDvDT,CCuDhB,EDvD2B,CAArB;ADCA,ACAA,ACwDN,EAAA,IDxDM,MDAA,CAAA,AEwDK,CFxDL,AEwDM,MDxDQ,CCwDpB,CAAoB,CDxDG,SCwDF,GDxDf,ACwDc,EAAI;AFvDpB,ACAE,ACwDJ,MDxDI,ECwDE,EFxDJ,GEwDS,GAAG,CFxDL,CAAC,GAAR,CAAY,AEwDM,CAAC,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C8DF,EAAA,KFhHW,CAAA,ACkDH,KDlDG,AEgHA,CAAC,EFhHI,KAAL,ACkDU,AC8DrB,CAAoB,ED9DI,KAAK,CAAC,EC8DT,KD9DG,CAAc,IC8DlB,EAAW,GD9DP,KAA4B,QAAO,SAAS,CAAC,CAAD,CAAhB,MAAwB,QAA1E;AC+DA,QAAM,aAAa,GAAG,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,UAAD,CAAN,CAAmB,SAA/B,CAAtB;AFrEG,ACQH,AC+DA,IFvES,AEuET,ID/DI,GAAG,CAAC,GDRY,EEuEP,CFvEU,AEuET,CD/Dd,EAAiB,IC+DjB,CAAsB,CFvEb,SEuEc,EFvEA,CAAC,IEuEF,EFvEC,AEuEO,EFvEa,MAApB,EAAqC;AAC9D,ACQI,AC+DA,SFvEG,CCQC,AC+DE,KFvEG,AEuEE,CFvED,EEuEI,IFvEX,CAAc,ACQjB,CC+DoB,CD/DD,AC+DE,OD/DK,CDRR,EEuEE,CFvEH,AEuEH,CAAmB,CFvEV,CAAN,EAAO,ACQW,CAAC,IAAV,AC+DZ,CD/D2B,AC+DE,OAA7B,EAAsC,CD/DV,EC+Da,CAAC,CD/Df,EAAK,EC+DhC,CAAd;AFtEF,ACOqD,ACgEnD,QFvEE,EEuEI,CFvED,CAAC,GCO6C,IAAI,CAAC,CCgEvC,CFvEf,EEuE0B,GFvEP,ECO4C,ACgEhC,CDhEiC,ACgEhC,CDhE+B,CAAV,CDP5B,ACOwB,CDPvB,CAAD,CAAN,AEuErB,CFvE+B,CCO2C,GAAG,CAAC,KDPhF,ACOqD,EDPR;AAC3C,ACMmF,ACiEnF,ODjE0B,CAAP,EDNf,AEuEA,GFvEG,CAAC,CEuEC,CAAC,OAAN,CFvEA,AEuEc,KFvEK,AEuEnB,CAAJ,EAA0B,GFvEG,CAAC,CAAD,CAAN,CAAU,MEuEM,CAAC,GFvExC,CEuE0B,CFvEmB,AEuEA,OFvEO,GAAG,CAAC,AEuE9B,IFvEmB;AAC9C,ACMC,ACiEA,UDjEI,ACiEA,QAAO,KDjEX,ACiEI,EDjEe,ICiEE,GDjEK,KCiE1B,EAA+B,EDjEI,CAAC,QAAV,CAAmB,CCiED,CAAC,CDjEG,CAAC,ECiElB,CAAmB,EDjExB,CAAP,ECiEY;AFtElC,ACMG,ACiED,GF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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export const configuration = {\r\n  countriesKey: 'allCountries',\r\n  dateKey: 'dateWhenSaved',\r\n  msOfDays: 604_800_000,\r\n  numberOfPopulate: 500_000_000,\r\n};\r\n","import { Country } from './types/interfaces';\r\n\r\nexport const getCountriesData = async (): Promise<Country[]> => {\r\n  return (await fetch('https://restcountries.com/v2/all')\r\n    .then((res) => res.json())\r\n    .then((data) => data)) as Country[];\r\n};\r\n","import { configuration } from '../config';\r\nimport { getCountriesData } from '../requests';\r\nimport { Country } from '../types/interfaces';\r\n\r\nexport const Task1 = async (localStorageCountriesData: Country[]) => {\r\n  const currentDate = Date.now();\r\n\r\n  // Check if the data is in the localStorage\r\n  if (!localStorageCountriesData) {\r\n    console.log('❗ Data does not exist ❗');\r\n\r\n    // Get data from api\r\n    const countries: Country[] = await getCountriesData();\r\n\r\n    // Save countries data to LocalStorage, save\r\n    localStorage.setItem(configuration.countriesKey, JSON.stringify(countries));\r\n    localStorage.setItem(configuration.dateKey, currentDate.toString());\r\n\r\n    console.log('📝 Data saved in localStorage.');\r\n    console.log('📢 Refresh page!');\r\n  } else {\r\n    const dateFromLocalStorage: string | null = localStorage.getItem(configuration.dateKey);\r\n    const lastSaveDate: string | number = typeof dateFromLocalStorage === 'string' ? parseInt(dateFromLocalStorage) : currentDate;\r\n\r\n    const numericDateFromLocalStorage: number = lastSaveDate;\r\n    const localStorageData: Country[] = localStorageCountriesData;\r\n    const currDate: number = currentDate;\r\n    const nextUpdate: number = numericDateFromLocalStorage + configuration.msOfDays;\r\n\r\n    console.log('✔️ Data exist in localStorage ✔️');\r\n    console.log('\\n📅 Data of save:\\n\\n', new Date(numericDateFromLocalStorage));\r\n    console.log('\\n📄 localStorage data:\\n', localStorageData);\r\n\r\n    // If you exceed possiblyNextUpdateData proceed\r\n    if (currDate >= nextUpdate) {\r\n      console.log('📝 Now you updating data!');\r\n\r\n      const oldData: Country[] = localStorageData;\r\n      const newData: Country[] = await getCountriesData();\r\n\r\n      console.log('🟨 Changed data is in:\\n', compareData(oldData, newData));\r\n\r\n      localStorage.setItem(configuration.countriesKey, JSON.stringify(newData));\r\n      localStorage.setItem(configuration.dateKey, currentDate.toString());\r\n    }\r\n  }\r\n};\r\n\r\nexport const compareData = (oldest: Country[], newest: Country[]): Country[] => {\r\n  return oldest.filter((old, i) => {\r\n    if (old.alpha2Code === newest[i].alpha2Code) {\r\n      if (old.population !== newest[i].population) return old.name;\r\n    }\r\n  });\r\n};\r\n","import { configuration } from '../config';\r\nimport { Country } from '../types/interfaces';\r\n\r\nexport const Task2 = async (localStorageCountriesData: Country[]) => {\r\n  // Select all EU countries\r\n  const enterCountryValuePathToSearchFor: string = 'regionalBlocs.acronym';\r\n  const enterCountryValueToSearchFor: string = 'EU';\r\n  const whetherToContain: boolean = true;\r\n  const arrayOfCountries: Country[] | string = getAllCountriesByTypeAndValue(localStorageCountriesData, {\r\n    path: enterCountryValuePathToSearchFor,\r\n    value: enterCountryValueToSearchFor,\r\n    contain: whetherToContain,\r\n  });\r\n  console.log(`\\n🔹 Countries of the ${enterCountryValueToSearchFor}: \\n`, arrayOfCountries);\r\n\r\n  // From all EU countries take countries which include any letter\r\n  const enterPhrasePathToSearchFor = 'name';\r\n  const enterPhraseToSearchFor: string = 'a';\r\n  const enterTypeOfSelectOrDelete: 'select' | 'delete' = 'delete';\r\n  const arrayOfCountriesContainingPhrase: Country[] | string = selectOrDeleteCountriesIncludesAnyLetter(arrayOfCountries, {\r\n    path: enterPhrasePathToSearchFor,\r\n    value: enterPhraseToSearchFor,\r\n    selectOrDelete: enterTypeOfSelectOrDelete,\r\n  });\r\n  console.log(`\\n🔹 Countries of the ${enterCountryValueToSearchFor}, include '${enterPhraseToSearchFor.toUpperCase()}':\\n`, arrayOfCountriesContainingPhrase);\r\n\r\n  // From all EU countries take countries which include 'a' and sort descending\r\n  const enterSortPathToSearchFor = 'population';\r\n  const enterSortToSearchFor: 'desc' | 'asc' = 'desc';\r\n  const arrayOfSortedCountries = sortCountriesByType(arrayOfCountriesContainingPhrase, { path: enterSortPathToSearchFor, sortType: enterSortToSearchFor });\r\n  console.log(`\\n🔹 Countries of the ${enterCountryValueToSearchFor}, include '${enterPhraseToSearchFor.toUpperCase()}', sorted ${enterSortToSearchFor.toUpperCase()}: \\n`, arrayOfSortedCountries);\r\n\r\n  // From all EU countries take countries which include 'a', sort descending and calculate the population sum\r\n  const enterLimit: number = 5;\r\n  const enterPathLimit = 'population';\r\n  const populateOfLimitedArray = calculateSumCountriesByType(arrayOfSortedCountries, { path: enterPathLimit, limit: enterLimit });\r\n  const isBigger = populateOfLimitedArray > configuration.numberOfPopulate ? '↗️ bigger' : '↘️ less';\r\n  console.log(\r\n    `\\n🔹 Countries of the ${enterCountryValueToSearchFor}, include '${enterPhraseToSearchFor.toUpperCase()}', sorted ${enterSortToSearchFor.toUpperCase()} and calculate population ➕: \\n\\n   Population ${enterLimit} countries is equal:`,\r\n    populateOfLimitedArray,\r\n    `And it's ${isBigger} than 500 million.`\r\n  );\r\n};\r\n\r\nexport const getAllCountriesByTypeAndValue = (countries: Country[], arg: { path: string; value: string; contain: boolean }): Country[] => {\r\n  const typesData = arg.path.split('.');\r\n\r\n  return countries.filter((country: Country) => {\r\n    // @ts-ignore\r\n    const arrayPath = country[typesData[0]];\r\n\r\n    if (!arrayPath) return false;\r\n\r\n    const isStringArray = Array.isArray(arrayPath) && typeof arrayPath[0] === 'string';\r\n    const isObjectArray = Array.isArray(arrayPath) && typeof arrayPath[0] === 'object';\r\n\r\n    if (arg.contain) {\r\n      if (isObjectArray) return arrayPath.some((data) => data[typesData[1]] === arg.value);\r\n      if (isStringArray) return arrayPath.includes(arg.value);\r\n      return arrayPath === arg.value;\r\n    } else {\r\n      if (isObjectArray) return arrayPath.some((data) => data[typesData[1]] !== arg.value);\r\n      if (isStringArray) return !arrayPath.includes(arg.value);\r\n      return arrayPath !== arg.value;\r\n    }\r\n  });\r\n};\r\n\r\nexport const selectOrDeleteCountriesIncludesAnyLetter = (countries: Country[], arg: { path: keyof Country; value: string; selectOrDelete: 'select' | 'delete' }): Country[] => {\r\n  return countries.filter((country) => {\r\n    if (typeof country[arg.path] === 'string') {\r\n      // @ts-ignore this if above sould be enough\r\n      return arg.selectOrDelete === 'select' ? country[arg.path].toUpperCase().includes(arg.value.toUpperCase()) : !country[arg.path].toUpperCase().includes(arg.value.toUpperCase());\r\n    }\r\n  });\r\n};\r\n\r\nexport const sortCountriesByType = (array: Country[], arg: { path: keyof Country; sortType: 'desc' | 'asc' }): Country[] => {\r\n  const sortArrayDesc = (first: any, next: any) => {\r\n    return next[arg.path] - first[arg.path];\r\n  };\r\n\r\n  const sortArrayAsc = (first: any, next: any) => {\r\n    return first[arg.path] - next[arg.path];\r\n  };\r\n\r\n  return arg.sortType === 'desc' ? [...array].sort(sortArrayDesc) : [...array].sort(sortArrayAsc);\r\n};\r\n\r\nexport const calculateSumCountriesByType = (countries: Country[], arg: { path: keyof Country; limit: number }): number => {\r\n  const limitedArray = countries.slice(0, arg.limit);\r\n\r\n  let sum = 0;\r\n  limitedArray.forEach((country: Country) => {\r\n    // @ts-ignore this if should be enough\r\n    if (typeof country[arg.path] === 'number') sum += country[arg.path];\r\n  });\r\n\r\n  return sum;\r\n};\r\n","import { getAllCountriesByTypeAndValue } from '../task2/Task2';\r\nimport { CountriesStats, Country, CountryStat, LangStat } from '../types/interfaces';\r\n\r\nconst countryStat: CountryStat = {\r\n  countries: [],\r\n  population: 0,\r\n  languages: {},\r\n  currencies: [],\r\n  area: 0,\r\n};\r\nconst countriesStats: CountriesStats = {};\r\n\r\n['EU', 'NAFTA', 'AU', 'other'].forEach((country) => (countriesStats[country] = { ...countryStat }));\r\n\r\nexport const Task3 = (localStorageCountriesData: Country[]) => {\r\n  const euCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, { path: 'regionalBlocs.acronym', value: 'EU', contain: true });\r\n  const naftaCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, { path: 'regionalBlocs.acronym', value: 'NAFTA', contain: true });\r\n  const auCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, { path: 'regionalBlocs.acronym', value: 'AU', contain: true });\r\n  const countriesWithoutEuNaftaAu: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, { path: 'regionalBlocs.acronym', value: 'AU EU NAFTA', contain: false });\r\n\r\n  getCountryStats(euCountries, { acronym: 'EU', object: countriesStats });\r\n  getCountryStats(naftaCountries, { acronym: 'NAFTA', object: countriesStats });\r\n  getCountryStats(auCountries, { acronym: 'AU', object: countriesStats });\r\n  getCountryStats(countriesWithoutEuNaftaAu, { acronym: 'other', object: countriesStats });\r\n\r\n  console.log('\\n🔸 The name of the organization with the largest population:', sortObject(countriesStats, { value: 'population', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 Name of the organization with the second largest population:', sortObject(countriesStats, { value: 'population', place: 2, sort: 'desc' }));\r\n  console.log('\\n🔸 The name of the organization occupying the third largest area:', sortObject(countriesStats, { value: 'area', place: 3, sort: 'desc' }));\r\n  console.log(\r\n    '\\n🔸 Names of organizations with the largest and smallest number of languages assigned to them:\\n',\r\n    'Largest:',\r\n    sortObject(countriesStats, { value: 'languages', place: 1, sort: 'desc' }),\r\n    '\\n Smallest:',\r\n    sortObject(countriesStats, { value: 'languages', place: 1, sort: 'asc' })\r\n  );\r\n  console.log('\\n🔸 Name of the organization using the largest number of currencies:', sortObject(countriesStats, { value: 'currencies', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 The name of the organization with the fewest number of member states:', sortObject(countriesStats, { value: 'countries', place: 1, sort: 'asc' }));\r\n  console.log('\\n🔸 Native name of the language used in the greatest number of countries:', sortObjectLang(countriesStats, { value: 'area', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 Native name of the language used by the smallest number of people:', sortObjectLang(countriesStats, { value: 'population', place: 1, sort: 'asc' }));\r\n  console.log(\r\n    '\\n🔸 Native names of the languages used in the largest and smallest area:\\n',\r\n    'Largest:',\r\n    sortObjectLang(countriesStats, { value: 'area', place: 1, sort: 'desc' }),\r\n    '\\n Smallest:',\r\n    sortObjectLang(countriesStats, { value: 'area', place: 1, sort: 'asc' })\r\n  );\r\n\r\n  console.log('\\n🟠 EU, NAFTA, AU and other countries: \\n', countriesStats);\r\n};\r\n\r\nexport const getCountryStats = (array: Country[], arg: { acronym: keyof CountriesStats; object: CountriesStats }) => {\r\n  const path = arg.object[arg.acronym];\r\n\r\n  array.forEach((country) => {\r\n    path.countries = [...path.countries, country.nativeName];\r\n    country.currencies?.every((currencie) => (path.currencies = [...path.currencies, currencie.name]));\r\n    path.population += country.population;\r\n    typeof country.area === 'number' && (path.area += country.area);\r\n\r\n    const langKeys = Object.keys(path.languages);\r\n    const countryLang = country.languages.map((lang) => lang.iso639_1);\r\n\r\n    countryLang.forEach((lang, i) => {\r\n      if (lang === langKeys[i]) {\r\n        path.languages[lang].countries.push(country.languages[i].nativeName);\r\n        path.languages[lang].name.push(country.alpha3Code);\r\n        path.languages[lang].area += country.area;\r\n        path.languages[lang].population += country.population;\r\n      } else {\r\n        const language = country.languages[i].iso639_1;\r\n        const countries = country.alpha3Code;\r\n        const name = country.languages[i].nativeName;\r\n        const area = country.area;\r\n        const population = country.population;\r\n        path.languages = { ...path.languages, ...{ [language]: { population, area, name: [name], countries: [countries] } } };\r\n      }\r\n    });\r\n  });\r\n\r\n  const unique = new Set(path.currencies);\r\n  path.currencies = Array.from(unique);\r\n  path.countries = path.countries.sort().reverse();\r\n};\r\n\r\nexport const sortObject = (object: CountriesStats, arg: { value: keyof CountryStat; place: number; sort: string }): string => {\r\n  const countryKeys = Object.keys(object);\r\n  const arrayOfValues: string[] | number[] = [];\r\n  const index = arg.place - 1;\r\n  const result: string[] = [];\r\n\r\n  countryKeys.forEach((key) => {\r\n    const value = object[key][arg.value];\r\n    const valueLength = Object.getOwnPropertyNames(value).length;\r\n    if (typeof value === 'object') arrayOfValues.push(valueLength);\r\n    if (typeof value !== 'object') arrayOfValues.push(value);\r\n  });\r\n\r\n  const sortedArrayOfValues: string[] | number[] = sortArrayOfValues(arg.sort, arrayOfValues);\r\n\r\n  countryKeys.forEach((key) => {\r\n    const value = object[key][arg.value];\r\n    const valueLength = Object.getOwnPropertyNames(value).length;\r\n\r\n    if (typeof value === 'object' && valueLength === sortedArrayOfValues[index]) result.push(key);\r\n    if (typeof value !== 'object' && value === sortedArrayOfValues[index]) result.push(key);\r\n  });\r\n\r\n  return result.toString();\r\n};\r\n\r\nconst sortObjectLang = (object: CountriesStats, arg: { value: keyof LangStat; place: number; sort: string }): string => {\r\n  const countryKeys = Object.keys(object);\r\n  const arrayOfValues: string[] | number[] = [];\r\n  const index = arg.place - 1;\r\n  const result: string[] = [];\r\n\r\n  countryKeys.forEach((countryKey) => {\r\n    const languagesKeys = Object.keys(object[countryKey].languages);\r\n\r\n    languagesKeys.forEach((langKey) => {\r\n      const value = object[countryKey].languages[langKey][arg.value];\r\n      const valueLength: number = value.length;\r\n      if (Array.isArray(value)) arrayOfValues.push(valueLength);\r\n      if (typeof value !== 'object') arrayOfValues.push(value);\r\n    });\r\n  });\r\n\r\n  const sortedArrayOfValues: string[] | number[] = sortArrayOfValues(arg.sort, arrayOfValues);\r\n\r\n  countryKeys.forEach((countryKey) => {\r\n    const languagesKeys = Object.keys(object[countryKey].languages);\r\n\r\n    languagesKeys.forEach((langKey) => {\r\n      const value = object[countryKey].languages[langKey][arg.value];\r\n      const valueLength = value.length;\r\n\r\n      if (typeof value === 'object' && valueLength === sortedArrayOfValues[index]) result.push(object[countryKey].languages[langKey].name[0]);\r\n      if (typeof value !== 'object' && value === sortedArrayOfValues[index]) result.push(object[countryKey].languages[langKey].name[0]);\r\n    });\r\n  });\r\n\r\n  const set = new Set(result);\r\n  const endResult = Array.from(set);\r\n  return endResult.toString();\r\n};\r\n\r\nconst sortArrayOfValues = (sort: string, array: string[] | number[]): string[] | number[] => {\r\n  if (sort === 'desc') {\r\n    return array.sort((a: any, b: any) => b - a);\r\n  } else {\r\n    return array.sort((a: any, b: any) => a - b);\r\n  }\r\n};\r\n","import { configuration } from './config';\r\nimport { Task1 } from './task1/Task1';\r\nimport { Task2 } from './task2/Task2';\r\nimport { Task3 } from './task3/Task3';\r\n\r\nwindow.onload = () => {\r\n  const localStorageSavedData: string | null = localStorage.getItem(configuration.countriesKey);\r\n  const localStorageCountriesData = typeof localStorageSavedData === 'string' && JSON.parse(localStorageSavedData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 1     ║\\n╚═══════════════╝');\r\n  Task1(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 2     ║\\n╚═══════════════╝');\r\n  Task2(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 3     ║\\n╚═══════════════╝');\r\n  Task3(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║     Logs      ║\\n╚═══════════════╝');\r\n};\r\n"]}