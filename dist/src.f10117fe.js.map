{"version":3,"sources":["src/config.ts","src/requests.ts","src/task1/Task1.ts","src/task2/Task2.ts","src/task3/Task3.ts","src/index.ts"],"names":[],"mappings":";;;;;;AAAa,AKAb,IAAA,GLAa,CAAA,IKAb,GAAA,MLAa,CKAb,CAAA,CLA6B,SKA7B,CAAA;ALCE,EAAA,YAAY,EAAE,cADa;AAE3B,AKDF,ELCE,EKDF,KLCS,EAAE,AKDX,GAAA,OAAA,CAAA,ILD6B,WKC7B,CAAA;ALEE,EAAA,QAAQ,EAAE,SAHiB;AAI3B,AKFF,ELEE,EKFF,OAAA,GAAA,ILEkB,EAAE,CKFpB,CAAA,eAAA,CAAA;ALF6B,CAAhB;AKGb,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAM,CAAC,MAAP,GAAgB,YAAA;AACd,MAAM,qBAAqB,GAAkB,YAAY,CAAC,OAAb,CAAqB,QAAA,CAAA,aAAA,CAAc,YAAnC,CAA7C;AACA,MAAM,yBAAyB,GAAG,OAAO,qBAAP,KAAiC,QAAjC,IAA6C,IAAI,CAAC,KAAL,CAAW,qBAAX,CAA/E;AAEA,EAAA,OAAO,CAAC,GAAR,CAAY,yDAAZ;AACA,EAAA,OAAA,CAAA,KAAA,CAAM,yBAAN;AAEA,EAAA,OAAO,CAAC,GAAR,CAAY,yDAAZ;AACA,EAAA,OAAA,CAAA,KAAA,CAAM,yBAAN;AAEA,EAAA,OAAO,CAAC,GAAR,CAAY,yDAAZ;AACA,EAAA,OAAA,CAAA,KAAA,CAAM,yBAAN;AAEA,EAAA,OAAO,CAAC,GAAR,CAAY,yDAAZ;AACD,CAdD;;;;;;;;;ADLA,IAAA,OAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAGA,IAAM,WAAW,GAAgB;AAC/B,EAAA,SAAS,EAAE,EADoB;AAE/B,EAAA,UAAU,EAAE,CAFmB;AAG/B,EAAA,SAAS,EAAE,EAHoB;AAI/B,EAAA,UAAU,EAAE,EAJmB;AAK/B,EAAA,IAAI,EAAE;AALyB,CAAjC;AAOA,IAAM,cAAc,GAAmB,EAAvC;AAEA,CAAC,IAAD,EAAO,OAAP,EAAgB,IAAhB,EAAsB,OAAtB,EAA+B,OAA/B,CAAuC,UAAC,OAAD,EAAQ;AAAK,SAAC,cAAc,CAAC,OAAD,CAAd,GAAuB,QAAA,CAAA,EAAA,EAAQ,WAAR,CAAxB;AAA8C,CAAlG;;AAEO,IAAM,KAAK,GAAG,SAAR,KAAQ,CAAC,yBAAD,EAAqC;AACxD,MAAM,WAAW,GAAc,OAAA,CAAA,sBAAA,CAAuB,yBAAvB,EAAkD;AAAE,IAAA,IAAI,EAAE,uBAAR;AAAiC,IAAA,KAAK,EAAE,IAAxC;AAA8C,IAAA,OAAO,EAAE;AAAvD,GAAlD,CAA/B;AACA,MAAM,cAAc,GAAc,OAAA,CAAA,sBAAA,CAAuB,yBAAvB,EAAkD;AAAE,IAAA,IAAI,EAAE,uBAAR;AAAiC,IAAA,KAAK,EAAE,OAAxC;AAAiD,IAAA,OAAO,EAAE;AAA1D,GAAlD,CAAlC;AACA,MAAM,WAAW,GAAc,OAAA,CAAA,sBAAA,CAAuB,yBAAvB,EAAkD;AAAE,IAAA,IAAI,EAAE,uBAAR;AAAiC,IAAA,KAAK,EAAE,IAAxC;AAA8C,IAAA,OAAO,EAAE;AAAvD,GAAlD,CAA/B;AACA,MAAM,cAAc,GAAc,yBAAyB,CAAC,MAA1B,CAAiC,UAAC,OAAD,EAAQ;AAAA,QAAA,EAAA;;AAAK,WAAA,CAAA,EAAA,GAAA,OAAO,CAAC,aAAR,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,IAAF,CAAO,UAAC,IAAD,EAAK;AAAK,aAAA,CAAC,CAAC,IAAD,EAAO,OAAP,EAAgB,IAAhB,EAAsB,QAAtB,CAA+B,IAAI,CAAC,OAApC,CAAD;AAA6C,KAA9D,CAArB;AAAoF,GAAlI,CAAlC;AAEA,EAAA,OAAA,CAAA,kBAAA,CAAmB,WAAnB,EAAgC;AAAE,IAAA,OAAO,EAAE,IAAX;AAAiB,IAAA,MAAM,EAAE;AAAzB,GAAhC;AACA,EAAA,OAAA,CAAA,kBAAA,CAAmB,cAAnB,EAAmC;AAAE,IAAA,OAAO,EAAE,OAAX;AAAoB,IAAA,MAAM,EAAE;AAA5B,GAAnC;AACA,EAAA,OAAA,CAAA,kBAAA,CAAmB,WAAnB,EAAgC;AAAE,IAAA,OAAO,EAAE,IAAX;AAAiB,IAAA,MAAM,EAAE;AAAzB,GAAhC;AACA,EAAA,OAAA,CAAA,kBAAA,CAAmB,cAAnB,EAAmC;AAAE,IAAA,OAAO,EAAE,OAAX;AAAoB,IAAA,MAAM,EAAE;AAA5B,GAAnC;AAEA,EAAA,OAAO,CAAC,GAAR,CAAY,gEAAZ,EAA8E,OAAA,CAAA,cAAA,CAAe,cAAf,EAA+B;AAAE,IAAA,IAAI,EAAE,YAAR;AAAsB,IAAA,KAAK,EAAE,CAA7B;AAAgC,IAAA,IAAI,EAAE;AAAtC,GAA/B,CAA9E;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,mEAAZ,EAAiF,OAAA,CAAA,cAAA,CAAe,cAAf,EAA+B;AAAE,IAAA,IAAI,EAAE,YAAR;AAAsB,IAAA,KAAK,EAAE,CAA7B;AAAgC,IAAA,IAAI,EAAE;AAAtC,GAA/B,CAAjF;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,qEAAZ,EAAmF,OAAA,CAAA,cAAA,CAAe,cAAf,EAA+B;AAAE,IAAA,IAAI,EAAE,MAAR;AAAgB,IAAA,KAAK,EAAE,CAAvB;AAA0B,IAAA,IAAI,EAAE;AAAhC,GAA/B,CAAnF;AACA,EAAA,OAAO,CAAC,GAAR,CACE,mGADF,EAEE,UAFF,EAGE,OAAA,CAAA,cAAA,CAAe,cAAf,EAA+B;AAAE,IAAA,IAAI,EAAE,WAAR;AAAqB,IAAA,KAAK,EAAE,CAA5B;AAA+B,IAAA,IAAI,EAAE;AAArC,GAA/B,CAHF,EAIE,cAJF,EAKE,OAAA,CAAA,cAAA,CAAe,cAAf,EAA+B;AAAE,IAAA,IAAI,EAAE,WAAR;AAAqB,IAAA,KAAK,EAAE,CAA5B;AAA+B,IAAA,IAAI,EAAE;AAArC,GAA/B,CALF;AAOA,EAAA,OAAO,CAAC,GAAR,CAAY,uEAAZ,EAAqF,OAAA,CAAA,cAAA,CAAe,cAAf,EAA+B;AAAE,IAAA,IAAI,EAAE,YAAR;AAAsB,IAAA,KAAK,EAAE,CAA7B;AAAgC,IAAA,IAAI,EAAE;AAAtC,GAA/B,CAArF;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,4EAAZ,EAA0F,OAAA,CAAA,cAAA,CAAe,cAAf,EAA+B;AAAE,IAAA,IAAI,EAAE,WAAR;AAAqB,IAAA,KAAK,EAAE,CAA5B;AAA+B,IAAA,IAAI,EAAE;AAArC,GAA/B,CAA1F;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,4EAAZ,EAA0F,OAAA,CAAA,eAAA,CAAgB,cAAhB,EAAgC;AAAE,IAAA,IAAI,EAAE,MAAR;AAAgB,IAAA,KAAK,EAAE,CAAvB;AAA0B,IAAA,IAAI,EAAE;AAAhC,GAAhC,CAA1F;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,yEAAZ,EAAuF,OAAA,CAAA,eAAA,CAAgB,cAAhB,EAAgC;AAAE,IAAA,IAAI,EAAE,YAAR;AAAsB,IAAA,KAAK,EAAE,CAA7B;AAAgC,IAAA,IAAI,EAAE;AAAtC,GAAhC,CAAvF;AACA,EAAA,OAAO,CAAC,GAAR,CACE,6EADF,EAEE,UAFF,EAGE,OAAA,CAAA,eAAA,CAAgB,cAAhB,EAAgC;AAAE,IAAA,IAAI,EAAE,MAAR;AAAgB,IAAA,KAAK,EAAE,CAAvB;AAA0B,IAAA,IAAI,EAAE;AAAhC,GAAhC,CAHF,EAIE,cAJF,EAKE,OAAA,CAAA,eAAA,CAAgB,cAAhB,EAAgC;AAAE,IAAA,IAAI,EAAE,MAAR;AAAgB,IAAA,KAAK,EAAE,CAAvB;AAA0B,IAAA,IAAI,EAAE;AAAhC,GAAhC,CALF;AAQA,EAAA,OAAO,CAAC,GAAR,CAAY,4CAAZ,EAA0D,cAA1D;AACD,CAlCM;;AAAM,OAAA,CAAA,KAAA,GAAK,KAAL;;AAoCN,IAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,KAAD,EAAmB,IAAnB,EAAkF;AAClH,MAAM,IAAI,GAAG,IAAI,CAAC,MAAL,CAAY,IAAI,CAAC,OAAjB,CAAb;AAEA,EAAA,KAAK,CAAC,OAAN,CAAc,UAAC,OAAD,EAAQ;;;AACpB,IAAA,IAAI,CAAC,SAAL,GAAc,aAAA,CAAA,aAAA,CAAA,EAAA,EAAO,IAAI,CAAC,SAAZ,CAAA,EAAqB,CAAE,OAAO,CAAC,UAAV,CAArB,CAAd;AHpDG,ACFP,AEuDI,IHrDS,ACFb,CEuDI,EAAA,GAAA,EFvDJ,GAAA,EEuDW,CAAC,EHrDiB,ECF7B,CDEgC,ACFhC,KEuDI,IHrDS,ECFb,AEuDsB,CFvDtB,GEuDI,IAAkB,EAAA,IHrDU,CGqDV,EHrDU,GGqDV,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,KAAF,CAAQ,UAAC,QAAD,EAAS;AHrDP,AGqDY,SHrDZ,IGqDa,IAAI,CHrDjB,AGqDkB,CHrDlB,KAAA,CAAA,EAAA,CGqDa,GAAe,CHrD5B,CAAA,EAAU,OAAV,EAAiB,AGqDW,CAAA,WHrDX,EGqDW,CAAA,EAAA,EAAO,IAAI,CAAC,UAAZ,CAAA,EAAsB,CAAE,QAAQ,CAAC,IAAX,CAAtB,CAAhB;AFtD5C,AEsDmG,IFtDnG,CEsDsB,CAAlB,QFtDJ,GAAA,OAAA,CAAA,aAAA,CAAA;AEuDI,IAAA,IAAI,CAAC,UAAL,IAAmB,OAAO,CAAC,UAA3B;AFpDG,AEqDH,IFrDS,KAAK,EEqDP,CFrDU,MEqDH,CAAC,EFrDN,EEqDT,GFrDiB,CAAO,CEqDA,QAAxB,KAAqC,IAAI,CAAC,IAAL,EFrDpB,EAA2C,AEqDV,OAAO,CAAC,IAA1D;AHtDM,ACCsD,AEuD5D,QAAM,CFvDsD,OEuD9C,CHxDR,CAAA,ACCsD,CAAA,AEuD3C,KFvD2C,CAAA,AEuDrC,CAAC,CFvDoC,GEuD3C,CAAY,CFvD+B,CAAA,EAAA,AEuD3B,CAAC,IFvD0B,CAAA,EAAA,EEuD3C,CAAjB,SFvD4D;ADDtD,AGyDN,QAAM,WAAW,GAAG,OAAO,CAAC,SAAR,CAAkB,GAAlB,CAAsB,UAAC,IAAD,EAAK;AHzDzC,AGyD8C,YHzDxC,CGyDwC,IHzDnC,AGyDuC,CHzDtC,AGyDuC,QAAL,0BHzDnC,CAAL,CACX,IADW,CACN,UAAC,GAAD,EAAI;AAAK,AGwDkD,KAA7C,CAApB,aHxDe,GAAG,CAAC,IAAJ,EAAA;AAAU,AG0DzB,IAAA,OH3DY,EAEX,EGyDU,CAAC,CH3DA,CAEN,KGyDN,CAAoB,IHzDb,IAAD,EAAK,AGyDU,IAAD,EAAO,CAAP,EAAQ;AHzDZ,ACAZ,ACLR,IAAA,MDKQ,ECLR,GAAA,IFKoB,ECAD,CCLnB,CFKoB,AELpB,CDKsB,IAAI,CAAC,GAAL,EAAd,ACLR,CAAA;AFKwB,WAFR,CAAN,CAAA,ECKJ,CAAC,2BAAD,OAAA,CAAA;AAAA,ACLC,AC4DD,ID5DO,KAAK,CC4DR,ED5DW,EC4DP,KAAK,ED5DN,KAAQ,CAAO,AC4DD,CAAC,CAAD,CAArB,EAA0B,oBD5DX,EAA2C;ADK1D,ACL0D,AC6DxD,QAAA,CD7DwD,GDK1D,AEwDM,CFxDN,AEwDO,CFxDP,ICL0D,CAAA,GC6DxD,CAAe,CD7DyC,CAAA,EAAA,AC6DxD,EAAqB,GD7DmC,CAAA,AC6DxD,CAA0B,CD7D8B,GC6DxD,CAA+B,CD7DyB,CAAA,EAAA,GC6DlB,CAAC,QD7DiB,CC6DzB,CAAkB,CAAlB,EAAqB,UAApD;AH7DN,ACME,AEwDI,QAAA,EFxDJ,EEwDQ,CAAC,IH9DX,ACMS,CDNT,ACMU,GAAR,CAAY,AEwDR,CAAe,IAAf,EAAqB,SAArB,CAA+B,IAA/B,CAAoC,GFxDxC,IEwD+C,CAAC,UAA5C;AH9DN,ACS+B,AEsDzB,QAAA,IAAI,CAAC,IFtDoB,CAAA,IEsDzB,CAAe,IAAf,EAAqB,IAArB,IAA6B,OAAO,CAAC,IAArC;AH/DN,ACS+B,ACPzB,AC8DA,MD9DA,EC8DA,IHhEE,AGgEE,CAAC,CHhEH,CAAA,EEES,EFFT,CEEoB,CFF5B,CAAA,AGgEM,CAAe,IAAf,EAAqB,UAArB,ID9DA,AC8DmC,OAAO,CAAC,UAA3C;AFvDyB,ACNzB,AC8DD,MD9DC,CCyDF,KFnDiC,CEwD1B,KD9DO,GAAW,CDMQ,CAAA,ECN/B,cDM+B,EAAN,CAAA;ACLzB,AC8DA,MD9DA,MC8DM,OD9DO,CC8DC,ED9DW,CC8DR,GD9DjB,IC8DwB,CAAC,SAAR,CAAkB,CAAlB,EAAqB,QAAtC;AD7DA,AC8DA,GHpEwB,CAAA,EEMxB,MC8DM,GD9DG,CC8DC,ED9DsB,CC8DnB,MD9DmB,CAAA,AC8DZ,CAAC,UAArB,WD9DgC,CAAuB,yBAAvB,EAAkD;AFFzF,ACMS,ACJkF,AC+DpF,CHrED,OEMqF,EDIlF,ECJsF,AC+DlF,ED/DoF,KDI/E,GAAc,AE2DT,EF3DS,CAAA,ACJyD,AC+D/D,IF3DM,EAAvB,CE2DwB,CFzD9B,AEyD+B,SAAR,CAAkB,CAAlB,EAAqB,UAAxC;AD/DuG,ACgEvG,QDhEuG,ICgEjG,CDhEsG,EAAE,CCgEpG,GAAG,OAAO,CDhE8D,ACgE7D,IAArB;AHtEK,ACaT,ACPgI,ACiE5H,OHvEK,CAAA,AEMuH,EDOhI,EE0DU,GDjE6H,EAAE,KDO7H,AE0DQ,CF1DP,CDbJ,CGuEc,EHvEE,GCazB,CAAqB,CE0DS,CAAC,MF1DV,CAAA,GDbZ,AGuEL,UF1DiB,CAAc,YAAnC,EAAiD,IAAI,CAAC,SAAL,CAAe,SAAf,CAAjD;AACA,ACRsF,ACkElF,ODlEgC,CAAhC,ACkEA,EF1DJ,EE0DQ,CAAC,SF1DG,AE0DR,CF1DS,EE0DK,KF1DlB,CAAqB,EE0DH,CAAA,KF1DG,CAAA,EE0DH,CAAA,EAAA,EAAQ,IAAI,CAAC,CF1DV,CAAc,OAAnC,AE0DkB,CAAA,CF1D0B,EE0DJ,EAAA,GAAA,EAAA,EF1De,AE0DR,CF1DS,CE0DT,CAAC,MF1DJ,EAA5C,AE0D+C,CAAA,GAAY;AFxD3D,ACTF,ACiE+D,MDjE/D,IDSE,AEwD6D,GDjExD,CAAC,GDSC,ACTT,CDSU,ACTE,ECiE6D,CFxDvE,CAAY,AEwD2D,UAAZ,sBFxD3D,CCTmC,WAAzB,GAAoC,IAApC,GAAyC,YAAzC,GAAqD,MAAjE,EAAyE,SAAzE;ADUE,ACPI,AC8DqE,MD9DrE,IDOJ,AEuDyE,IAAI,ED9D/D,AC8D+D,CFvDtE,CAAC,CCPS,CC8D0C,CFvD3D,CAAY,GCPR,eDOJ;ACNI,AC6D2E,MD7D3E,IC6D2E,IAAI,EAAE,CD7DtE,AC6DuE,GD7D5D,GAAtB,IC6DiF,CAA1B;AD5DvD,AC4D+F,MD5D/F,IC4D+F,SAAS,ED5DzF,AC4D2F,CAAC,ED5DpE,EC4DmE,MD5D1G;AACA,AC2DuD,MD3DvD,GC2DoC,EAA8E,EAApG,EAAd,MD3De,GAAuB,OAAA,CAAA,eAAA,CAAgB,SAAhB,EAA2B;AAAE,AC4DpE,QD5DoE,IAAI,EAAE,UAAR;AAAoB,AC6DxF,KAdD,GD/CyF,KAAK,EAAE,WAA3B;ADM/D,ACNuG,AC8D9G,GAxBD,KDtC+G,EDMvG,YCNqH,EAAE,MDMnG,GAAkB,YAAY,CAAC,OAAb,CAAqB,QAAA,CAAA,aAAA,CAAc,OAAnC,CAAtC;AACA,ACP+D,ACgEvE,MAAM,CDhEsC,CAAtC,EDOE,EEyDI,GAAG,IAAI,GFzDC,AEyDL,CAAQ,EFzDiB,EEyDb,CAAC,IFzDmB,MEy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IAAA,GDrE4B,CAAP,EDDf,GAAG,CAAC,GEsEG,CAAC,MFtER,CEsEN,CAAsB,GFtEG,MAAM,CAAC,AEsET,CFtEQ,CAAN,CAAU,IEsEb,EAAQ,IFtE5B,EAA6C,OAAO,GAAG,CAAC,IAAX;AAC9C,ACCC,ACqEA,UDrEI,ACqEE,KAAK,GAAG,KDrEd,CCqEoB,CDrED,ACqEE,ODrEK,GCqEN,CAAN,CAAmB,IDrEE,CAAC,ICqEtB,CAA6B,GDrEjB,CAAmB,GCqE/B,CDrEmC,CAAC,ACqEE,IAAI,CDrE9B,ACqE+B,CDrEtC,GCqEL,CAAd;AFrEH,ACCG,ACqEA,GF1EG,CAAP,ME0EU,GDrEC,QCqEU,CDrED,ECqEI,GDrEC,ECqEI,CAAC,CDrED,CAAC,KAA1B,ACqEoB,CAAc,KAAd,KAAwB,KAAK,CAAC,MAAlD;AFrEL,ACCI,ACqEC,CF5EC,ICGH,KCyEM,CDrEC,ICqEI,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B,aAAa,CAAC,IAAd,CAAmB,WAAnB;ADpE1B,ACqEA,UDrEI,ACqEA,QAAO,KDrEX,ACqEI,EDrEe,ICqEE,GDrEK,KCqE1B,EAA+B,EDrEI,CAAC,IAAV,CAAe,KCqEG,CAAC,IDrEH,ACqEX,CAAmB,GDrET,EAAK,ACqEf;AF7ExB,ACQ4C,ACsEpD,KALD,EFzES,CAAA,OCQ4C,IDR5C,ACQgD,CAAC,EDRtC,ECQ0C,CAAC,CAAD,CAAL,CAAJ,KDR5C,ACQ8D,IAAI,CAAC,KAAvB;AAA4B,ACuElF,GATD,ID9D8B,CAAP;AACnB,ACwEJ,MAAM,IDxEE,QCwEU,GAAQ,EDxEtB,EAAmB,CCwEQ,CAAC,IAAN,CDxEI,ACwEO,CDxEN,GCwEU,GAAJ,CAAQ,EDxEL,CAAC,OCwEc,CDxExB,ACwEyB,CDxEN,GCwEU,CDxEN,ACwEO,CDxEN,GCwEA,EDxExB,ACwEoC,CDxE5C,YCwEgC,CAAlB,CAAX,CAA1B;ADvEI,ACyEJ,EAAA,WDzEW,ACyEA,CAAC,OAAZ,CDzEoB,ACyEA,KDzEK,IAAI,CAAC,ACyET,KDzEjB,KCyEgB,EAAW;ADxE5B,ACyED,QAAM,aAAa,GAAG,MAAM,CAAC,IAAP,CA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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export const configuration = {\r\n  countriesKey: 'allCountries',\r\n  dateKey: 'dateWhenSaved',\r\n  msOfDays: 604_800_000,\r\n  numberOfPopulate: 500_000_000,\r\n};\r\n","import { Country } from './types/interfaces';\r\n\r\nexport const getCountriesData = async (): Promise<Country[]> => {\r\n  return (await fetch('https://restcountries.com/v2/all')\r\n    .then((res) => res.json())\r\n    .then((data) => data)) as Country[];\r\n};\r\n","import { configuration } from '../config';\r\nimport { getCountriesData } from '../requests';\r\nimport { Country } from '../types/interfaces';\r\n\r\nexport const Task1 = async (localStorageCountriesData: Country[]) => {\r\n  const currentDate = Date.now();\r\n\r\n  // Check if the data is in the localStorage\r\n  if (!localStorageCountriesData) {\r\n    console.log('❗ Data does not exist ❗');\r\n\r\n    // Get data from api\r\n    const countries: Country[] = await getCountriesData();\r\n\r\n    // Save countries data to LocalStorage, save\r\n    localStorage.setItem(configuration.countriesKey, JSON.stringify(countries));\r\n    localStorage.setItem(configuration.dateKey, currentDate.toString());\r\n\r\n    console.log('📝 Data saved in localStorage.');\r\n    console.log('📢 Refresh page!');\r\n  } else {\r\n    const dateFromLocalStorage: string | null = localStorage.getItem(configuration.dateKey);\r\n    const lastSaveDate: string | number = typeof dateFromLocalStorage === 'string' ? parseInt(dateFromLocalStorage) : currentDate;\r\n\r\n    const numericDateFromLocalStorage: number = lastSaveDate;\r\n    const localStorageData: Country[] = localStorageCountriesData;\r\n    const currDate: number = currentDate;\r\n    const nextUpdate: number = numericDateFromLocalStorage + configuration.msOfDays;\r\n\r\n    console.log('✔️ Data exist in localStorage ✔️');\r\n    console.log('\\n📅 Data of save:\\n\\n', new Date(numericDateFromLocalStorage));\r\n    console.log('\\n📄 localStorage data:\\n', localStorageData);\r\n\r\n    // If you exceed possiblyNextUpdateData proceed\r\n    if (currDate >= nextUpdate) {\r\n      console.log('📝 Now you updating data!');\r\n\r\n      const oldData: Country[] = localStorageData;\r\n      const newData: Country[] = await getCountriesData();\r\n\r\n      console.log('🟨 Changed data is in:\\n', compareData(oldData, newData));\r\n\r\n      localStorage.setItem(configuration.countriesKey, JSON.stringify(newData));\r\n      localStorage.setItem(configuration.dateKey, currentDate.toString());\r\n    }\r\n  }\r\n};\r\n\r\nexport const compareData = (oldest: Country[], newest: Country[]): Country[] => {\r\n  return oldest.filter((old, i) => {\r\n    if (old.alpha2Code === newest[i].alpha2Code) {\r\n      if (old.population !== newest[i].population) return old.name;\r\n    }\r\n  });\r\n};\r\n","import { configuration } from '../config';\r\nimport { Country } from '../types/interfaces';\r\n\r\nexport const Task2 = async (localStorageCountriesData: Country[]) => {\r\n  // Select all EU countries\r\n  const countryPath: string = 'regionalBlocs.acronym';\r\n  const countryValue: string = 'EU';\r\n  const shouldContain: boolean = true;\r\n  const countries: Country[] | string = filterCountriesByValue(localStorageCountriesData, { path: countryPath, value: countryValue, contain: shouldContain });\r\n  console.log(`\\n🔹 Countries of the ${countryPath}: ${countryValue}: \\n`, countries);\r\n\r\n  // From all EU countries take countries which dont contain any letter\r\n  const phrasePath = 'name';\r\n  const phraseValue: string = 'a';\r\n  const phraseTypeValue: 'select' | 'delete' = 'delete';\r\n  const countriesPhrase: Country[] | string = filterCountries(countries, { path: phrasePath, value: phraseValue, selectOrDelete: phraseTypeValue });\r\n  console.log(`\\n🔹 Countries of the ${countryPath}: ${countryValue}, dont contain '${phraseValue.toUpperCase()}' in ${phrasePath}:\\n`, countriesPhrase);\r\n\r\n  // From all EU countries take countries which dont contain 'a' and sort descending\r\n  const sortPath = 'population';\r\n  const sortType: 'desc' | 'asc' = 'desc';\r\n  const countriesSorted = sortCountries(countriesPhrase, { path: sortPath, sortType: sortType });\r\n  console.log(\r\n    `\\n🔹 Countries of the ${countryPath}: ${countryValue}, dont contain '${phraseValue.toUpperCase()}' in ${phrasePath}, sorted ${sortType.toUpperCase()} by ${sortPath}: \\n`,\r\n    countriesSorted\r\n  );\r\n\r\n  // From all EU countries take countries which dont contain 'a', sort descending and calculate the population sum\r\n  const limit: number = 5;\r\n  const limitPath = 'population';\r\n  const countriesLimited = calculateCountriesSum(countriesSorted, { path: limitPath, limit: limit });\r\n  const isBigger = countriesLimited > configuration.numberOfPopulate ? '↗️ bigger' : '↘️ less';\r\n  console.log(\r\n    `\\n🔹 Countries of the ${countryPath}: ${countryValue}, dont contain '${phraseValue.toUpperCase()}' in ${phrasePath}, sorted ${sortType.toUpperCase()} by ${sortPath} and calculate ${limitPath} ➕: \\n\\n   ${limitPath} ${limit} first countries is equal:`,\r\n    countriesLimited,\r\n    `And it's ${isBigger} than 500 million.`\r\n  );\r\n};\r\n\r\nexport const filterCountriesByValue = (countries: Country[], args: { path: string; value: string; contain: boolean }): Country[] => {\r\n  const path = args.path.split('.');\r\n\r\n  return countries.filter((country: Country) => {\r\n    // @ts-ignore\r\n    const arrayPath = country[path[0]];\r\n\r\n    if (!arrayPath) return false;\r\n\r\n    const isStringArray = Array.isArray(arrayPath) && typeof arrayPath[0] === 'string';\r\n    const isObjectArray = Array.isArray(arrayPath) && typeof arrayPath[0] === 'object';\r\n\r\n    if (args.contain) {\r\n      if (isObjectArray) return arrayPath.some((data) => data[path[1]] === args.value);\r\n      if (isStringArray) return arrayPath.includes(args.value);\r\n      return arrayPath === args.value;\r\n    } else {\r\n      if (isObjectArray) return arrayPath.some((data) => data[path[1]] !== args.value);\r\n      if (isStringArray) return !arrayPath.includes(args.value);\r\n      return arrayPath !== args.value;\r\n    }\r\n  });\r\n};\r\n\r\nexport const filterCountries = (countries: Country[], args: { path: keyof Country; value: string; selectOrDelete: 'select' | 'delete' }): Country[] => {\r\n  return countries.filter((country) => {\r\n    if (typeof country[args.path] === 'string') {\r\n      // @ts-ignore this if above sould be enough\r\n      return args.selectOrDelete === 'select' ? country[args.path].toUpperCase().includes(args.value.toUpperCase()) : !country[args.path].toUpperCase().includes(args.value.toUpperCase());\r\n    }\r\n  });\r\n};\r\n\r\nexport const sortCountries = (array: Country[], args: { path: keyof Country; sortType: 'desc' | 'asc' }): Country[] => {\r\n  const sortArrayDesc = (first: any, next: any) => {\r\n    return next[args.path] - first[args.path];\r\n  };\r\n\r\n  const sortArrayAsc = (first: any, next: any) => {\r\n    return first[args.path] - next[args.path];\r\n  };\r\n\r\n  return args.sortType === 'desc' ? [...array].sort(sortArrayDesc) : [...array].sort(sortArrayAsc);\r\n};\r\n\r\nexport const calculateCountriesSum = (countries: Country[], args: { path: keyof Country; limit: number }): number => {\r\n  const limitedArray = countries.slice(0, args.limit);\r\n\r\n  let sum = 0;\r\n  limitedArray.forEach((country: Country) => {\r\n    // @ts-ignore this if should be enough\r\n    if (typeof country[args.path] === 'number') sum += country[args.path];\r\n  });\r\n\r\n  return sum;\r\n};\r\n","import { filterCountriesByValue } from '../task2/Task2';\r\nimport { CountriesStats, Country, CountryStat, LangStat } from '../types/interfaces';\r\n\r\nconst countryStat: CountryStat = {\r\n  countries: [],\r\n  population: 0,\r\n  languages: {},\r\n  currencies: [],\r\n  area: 0,\r\n};\r\nconst countriesStats: CountriesStats = {};\r\n\r\n['EU', 'NAFTA', 'AU', 'other'].forEach((country) => (countriesStats[country] = { ...countryStat }));\r\n\r\nexport const Task3 = (localStorageCountriesData: Country[]) => {\r\n  const euCountries: Country[] = filterCountriesByValue(localStorageCountriesData, { path: 'regionalBlocs.acronym', value: 'EU', contain: true });\r\n  const naftaCountries: Country[] = filterCountriesByValue(localStorageCountriesData, { path: 'regionalBlocs.acronym', value: 'NAFTA', contain: true });\r\n  const auCountries: Country[] = filterCountriesByValue(localStorageCountriesData, { path: 'regionalBlocs.acronym', value: 'AU', contain: true });\r\n  const otherCountries: Country[] = localStorageCountriesData.filter((country) => country.regionalBlocs?.some((bloc) => !['EU', 'NAFTA', 'AU'].includes(bloc.acronym)));\r\n\r\n  insertCountryStats(euCountries, { acronym: 'EU', object: countriesStats });\r\n  insertCountryStats(naftaCountries, { acronym: 'NAFTA', object: countriesStats });\r\n  insertCountryStats(auCountries, { acronym: 'AU', object: countriesStats });\r\n  insertCountryStats(otherCountries, { acronym: 'other', object: countriesStats });\r\n\r\n  console.log('\\n🔸 The name of the organization with the largest population:', getCountryName(countriesStats, { path: 'population', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 Name of the organization with the second largest population:', getCountryName(countriesStats, { path: 'population', place: 2, sort: 'desc' }));\r\n  console.log('\\n🔸 The name of the organization occupying the third largest area:', getCountryName(countriesStats, { path: 'area', place: 3, sort: 'desc' }));\r\n  console.log(\r\n    '\\n🔸 Names of organizations with the largest and smallest number of languages assigned to them:\\n',\r\n    'Largest:',\r\n    getCountryName(countriesStats, { path: 'languages', place: 1, sort: 'desc' }),\r\n    '\\n Smallest:',\r\n    getCountryName(countriesStats, { path: 'languages', place: 1, sort: 'asc' })\r\n  );\r\n  console.log('\\n🔸 Name of the organization using the largest number of currencies:', getCountryName(countriesStats, { path: 'currencies', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 The name of the organization with the fewest number of member states:', getCountryName(countriesStats, { path: 'countries', place: 1, sort: 'asc' }));\r\n  console.log('\\n🔸 Native name of the language used in the greatest number of countries:', getLanguageName(countriesStats, { path: 'area', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 Native name of the language used by the smallest number of people:', getLanguageName(countriesStats, { path: 'population', place: 1, sort: 'asc' }));\r\n  console.log(\r\n    '\\n🔸 Native names of the languages used in the largest and smallest area:\\n',\r\n    'Largest:',\r\n    getLanguageName(countriesStats, { path: 'area', place: 1, sort: 'desc' }),\r\n    '\\n Smallest:',\r\n    getLanguageName(countriesStats, { path: 'area', place: 1, sort: 'asc' })\r\n  );\r\n\r\n  console.log('\\n🟠 EU, NAFTA, AU and other countries: \\n', countriesStats);\r\n};\r\n\r\nexport const insertCountryStats = (array: Country[], args: { acronym: keyof CountriesStats; object: CountriesStats }) => {\r\n  const path = args.object[args.acronym];\r\n\r\n  array.forEach((country) => {\r\n    path.countries = [...path.countries, country.nativeName];\r\n    country.currencies?.every((currency) => (path.currencies = [...path.currencies, currency.name]));\r\n    path.population += country.population;\r\n    typeof country.area === 'number' && (path.area += country.area);\r\n\r\n    const langKeys = Object.keys(path.languages);\r\n    const countryLang = country.languages.map((lang) => lang.iso639_1);\r\n\r\n    countryLang.forEach((lang, i) => {\r\n      if (lang === langKeys[i]) {\r\n        path.languages[lang].name.push(country.languages[i].nativeName);\r\n        path.languages[lang].countries.push(country.alpha3Code);\r\n        path.languages[lang].area += country.area;\r\n        path.languages[lang].population += country.population;\r\n      } else {\r\n        const language = country.languages[i].iso639_1;\r\n        const name = country.alpha3Code;\r\n        const nativeName = country.languages[i].nativeName;\r\n        const area = country.area;\r\n        const population = country.population;\r\n        path.languages = { ...path.languages, ...{ [language]: { population, area, name: [nativeName], countries: [name] } } };\r\n      }\r\n    });\r\n  });\r\n\r\n  const unique = new Set(path.currencies);\r\n  path.currencies = Array.from(unique);\r\n  path.countries = path.countries.sort().reverse();\r\n\r\n  return args.object;\r\n};\r\n\r\nexport const getCountryName = (object: CountriesStats, args: { path: keyof CountryStat; place: number; sort: string }): string => {\r\n  const countryKeys = Object.keys(object);\r\n  const arrayOfValues: string[] | number[] = [];\r\n  const place = args.place - 1;\r\n  const result: string[] = [];\r\n\r\n  countryKeys.forEach((key) => {\r\n    const value = object[key][args.path];\r\n    const valueLength = Object.getOwnPropertyNames(value).length;\r\n    if (typeof value === 'object') arrayOfValues.push(valueLength);\r\n    if (typeof value !== 'object') arrayOfValues.push(value);\r\n  });\r\n\r\n  const uniqueValues: any = Array.from(new Set(sortValues(args.sort, arrayOfValues)));\r\n\r\n  countryKeys.forEach((key) => {\r\n    const value = object[key][args.path];\r\n    const valueLength = Object.getOwnPropertyNames(value).length;\r\n\r\n    if (typeof value === 'object' && valueLength === uniqueValues[place]) result.push(key);\r\n    if (typeof value !== 'object' && value === uniqueValues[place]) result.push(key);\r\n  });\r\n\r\n  return result.toString();\r\n};\r\n\r\nexport const getLanguageName = (object: CountriesStats, args: { path: keyof LangStat; place: number; sort: string }): string => {\r\n  const countryKeys = Object.keys(object);\r\n  const arrayOfValues: string[] | number[] = [];\r\n  const place = args.place - 1;\r\n  const result: string[] = [];\r\n\r\n  countryKeys.forEach((countryKey) => {\r\n    const languagesKeys = Object.keys(object[countryKey].languages);\r\n\r\n    languagesKeys.forEach((langKey) => {\r\n      const value = object[countryKey].languages[langKey][args.path];\r\n      const valueLength = Array.isArray(value) && value.length;\r\n      if (Array.isArray(value)) arrayOfValues.push(valueLength);\r\n      if (typeof value !== 'object') arrayOfValues.push(value);\r\n    });\r\n  });\r\n\r\n  const uniqueValues: any = Array.from(new Set(sortValues(args.sort, arrayOfValues)));\r\n\r\n  countryKeys.forEach((countryKey) => {\r\n    const languagesKeys = Object.keys(object[countryKey].languages);\r\n\r\n    languagesKeys.forEach((langKey) => {\r\n      const value = object[countryKey].languages[langKey][args.path];\r\n      const valueLength = Array.isArray(value) && value.length;\r\n\r\n      if (typeof value === 'object' && valueLength === uniqueValues[place]) result.push(object[countryKey].languages[langKey].name[0]);\r\n      if (typeof value !== 'object' && value === uniqueValues[place]) result.push(object[countryKey].languages[langKey].name[0]);\r\n    });\r\n  });\r\n\r\n  const set = new Set(result);\r\n  const endResult = Array.from(set);\r\n  return endResult.toString();\r\n};\r\n\r\nconst sortValues = (sort: string, array: string[] | number[]): string[] | number[] => {\r\n  if (sort === 'desc') {\r\n    return array.sort((a: any, b: any) => b - a);\r\n  } else {\r\n    return array.sort((a: any, b: any) => a - b);\r\n  }\r\n};\r\n","import { configuration } from './config';\r\nimport { Task1 } from './task1/Task1';\r\nimport { Task2 } from './task2/Task2';\r\nimport { Task3 } from './task3/Task3';\r\n\r\nwindow.onload = () => {\r\n  const localStorageSavedData: string | null = localStorage.getItem(configuration.countriesKey);\r\n  const localStorageCountriesData = typeof localStorageSavedData === 'string' && JSON.parse(localStorageSavedData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 1     ║\\n╚═══════════════╝');\r\n  Task1(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 2     ║\\n╚═══════════════╝');\r\n  Task2(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 3     ║\\n╚═══════════════╝');\r\n  Task3(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║     Logs      ║\\n╚═══════════════╝');\r\n};\r\n"]}