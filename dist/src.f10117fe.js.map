{"version":3,"sources":["src/config.ts","src/requests.ts","src/task1/Task1.ts","src/task2/Task2.ts","src/task3/Task3.ts","src/index.ts"],"names":[],"mappings":"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C+FwB,CD/FZ,CDGK,GAAc,EAAA,CAAA,CE4FpB,GF5FoB,EAAvB,EAEN,GE0FsB,CAAC,MAAD,EAAyB,GAAzB,EAAuF,KD/F1E,4BAAzB,GAAqD,MAAjE,EAAyE,gBAAzE;AAGM,AC6FN,MD7FM,AC6FA,WAAW,GAAG,MAAM,CAAC,IAAP,CD7FY,AC6FA,GD7FW,GC6FvB,CAApB,ED7FM;AFVK,ACaT,ACFI,AC6FN,MD7FM,AC6FA,CHxGK,CAAA,ECaT,SE2FiB,GF3FL,AE2F6B,CF3F5B,CDbJ,AGwGX,GHxG2B,CEWC,EDE1B,CAAqB,ACFgB,GAAjC,KDEiB,CAAA,GDbZ,UCaY,CAAc,YAAnC,EAAiD,IAAI,CAAC,SAAL,CAAe,SAAf,CAAjD;AACA,ACFI,AC6FN,MD7FM,AC6FA,IF3FJ,CE2FS,GAAG,GAAG,CAAC,IF3FJ,CAAC,AE2FD,GAAY,CAA1B,GF3FE,CAAqB,OCFe,CDEf,CAAA,CCFsC,OAAA,CAAA,IDEtC,CAAc,OAAnC,EAA4C,WAAW,CAAC,MCFG,CAAiC,CDEhD,EAA5C,aCF2D,EAAmD,0BAAnD,EAA+E,sBAA/E,CAAvD;ADIJ,ACHF,AC6FA,MD7FA,AC6FM,IF1FJ,EE0FU,CD7FL,CAAC,CC6FiB,EF1FhB,ACHT,AC6FA,CF1FU,ACHE,GDGV,CAAY,gCAAZ,CCHmC,4BAAzB,GAAqD,aAArD,GAAmE,sBAAsB,CAAC,WAAvB,EAAnE,GAAuG,MAAnH,EAA2H,gCAA3H;ADIE,ACDI,AC4FN,EAAA,ID5FM,IDCJ,GE2FS,CAAC,GF3FH,CAAC,GAAR,AE2FF,CF3Fc,AE2FM,QD5FU,EC4FT,CD5FoB,EC4FrB,EAAI,GF3FtB,KCDI;AACA,AC4FJ,MD5FI,EC4FE,KAAK,GAAG,MAAM,CAAC,GD5FG,AC4FJ,CAAN,CAAY,CD5FiB,EC4Fd,CAAC,GD5F1B,EC4FU,CAAd;AD3FI,AC4FJ,MD5FI,EC4FE,WAAW,GAAG,MD5FM,AC4FA,CAAC,ED5FE,OAAA,CAAA,SC4FT,CAA2B,KAA3B,EAAkC,ED5FzB,CAAoB,GC4FjD,6BD5F6B,EAAsD,wBAAtD,EAAgF,oBAAhF,CAAzB;AACN,AC4FE,MD5FF,EC4FM,KD5FC,CAAC,EC4FK,CD5Fb,CAAY,GC4FN,MAAiB,QAArB,EAA+B,aAAa,CAAC,ID5FV,AC4FJ,CAAmB,WAAnB,gBD5FrB,GAAqD,aAArD,GAAmE,sBAAsB,CAAC,WAAvB,EAAnE,GAAuG,YAAvG,GAAoH,oBAAoB,CAAC,WAArB,EAApH,GAAsJ,MAAlK,EAA0K,sBAA1K;AAGM,AC0FJ,MD1FI,EC0FA,QD1FU,AC0FH,GD1Fc,CAArB,CC0FA,MAAiB,QAArB,EAA+B,aAAa,CAAC,IAAd,CAAmB,KAAnB;ADzF3B,AC0FL,GALD,GDrFM,cAAc,GAAG,YAAjB;ADJE,ACKF,AC2FN,MD3FM,AC2FF,IFhGI,eEgGe,GD3FK,AC2FmB,EFhGnB,AEgG5B,CD3F+B,EDLe,KCKf,CAAA,MDL2B,CAAC,OAAb,CAAqB,QAAA,CAAA,GCKpC,CAA4B,SDLQ,CAAc,OAAnC,CAAtC,ICKuB,EAAoD,cAApD,EAAoE,UAApE,CAAzB;ADJE,ACKF,MAAA,IDLE,ICKM,GAAG,KDLG,GAAoB,OAAO,OCKR,GAAG,QAAA,CAAA,CDLF,KAAgC,OCK9B,CDLF,ACKgB,GDL2B,QAAQ,CAAC,ICK3E,GAA0D,WAA1D,EDL0E,CAAnD,ACKiD,GDL2B,MCK9G,KDLE;AAEA,ACIR,AC0FA,MD1FA,AC0FI,GAAG,CF9FC,AE8FA,GD1FD,CAAC,AC0FJ,GD1FJ,CACE,CCyFe,MAAjB,EAAyB,UF9FU,GAAW,YAAtC,GCKmB,4BAAzB,GAAqD,aAArD,GAAmE,sBAAsB,CAAC,WAAvB,EAAnE,GAAuG,YAAvG,GAAoH,oBAAoB,CAAC,WAArB,EAApH,GAAsJ,sDAAtJ,GAAwM,UAAxM,GAAkN,sBADpN,EAEE,sBAFF,EAGE,cAAY,QAAZ,GAAoB,oBAHtB;ADHQ,AE8FN,IAAA,MF9FM,aE8Fa,GF9FG,AE8FA,GF9Fc,UE8FD,CAAC,IAAd,CAAmB,SF9FnC,CE8FoC,CAAD,EAAS,CAAT,EAAe;AF7FlD,AE6FuD,UF7FvD,GE6FuD,CAAC,GAAG,CF7FnD,AE6F+C,GF7FpC,WAAnB;AACA,AE4F4D,KAA5C,CAAtB,IF5FM,UAAU,GAAW,2BAA2B,GAAG,QAAA,CAAA,aAAA,CAAc,QAAjE;AAEN,AE2FD,GAFD,MAEO,CF3FL,OAAO,CAAC,GAAR,CAAY,kCAAZ;AACA,AE2FA,GDtH4D,CAAA,ACsH5D,MF3FA,OAAO,CAAC,GAAR,CAAY,CE2FO,GAAG,aAAa,CAAC,IAAd,CAAmB,CF3FzC,EAAsC,IAAI,GE2FA,CF3FJ,AE2FG,CF3FM,CE2FG,CAAT,EAAe,uBF3FlB,CAAtC;AACA,ACEH,ACwFgE,CDtH1D,SD4BH,GE0F6D,CAAC,GF1FvD,AE0F0D,CF1FzD,AE0FqD,GF1F7D,CAAY,2BAAZ,EAAyC,gBAAzC;AE0FkE,KAA5C,CAAtB,UFvFI,QAAQ,IAAI,aAAZ,OAAA,CAAA;AAAA,AC/BK,ACuHV,ODvHU,CAAA,KAAA,GAAK,KAAL;AD+BL,YAAA,CAAA,CAAA;AACF,ACAC,ACyFL,EAAA,EDzFW,MDAP,GEyFO,CAAC,GFzFD,CAAC,GAAR,AEyFJ,CFzFgB,AEyFI,UAAC,CDzFmB,ECyFpB,CDzFuB,CCyFnB,QDzFb,IDAP,yBCAuC,CAAC,SAAD,EAAuB,KAAvB,EAAsC,KAAtC,EAAqD,eAArD,EAA6E;ADE9G,ACDV,ACyFE,MDzFI,ECyFE,EFxFE,GEwFG,EDzFE,CCyFC,CFxFC,CCDC,EDCa,EEwFT,CDzFC,ACyFA,CDzFC,ECyFF,CAAN,CAAY,CDzFV,CAAY,CCyFC,CAAC,CDzFd,CAAlB,EDCU,CEwFM,CAAd;AFvF6B,ACA/B,ACwFE,QAAM,CDxFD,QDAwB,CAAA,ACAf,CAAC,ACwFE,GAAG,GDxFf,CAAiB,ECwFI,CAAC,ODxFJ,OAAD,EAAiB,GCwFnB,CAA2B,KAA3B,EAAkC,MAAtD;AFxF6B,ACC7B,ACyFA,QDzFM,ACyFF,QAAO,CDzFI,GAAG,CCyFd,MDzFqB,ACyFJ,CDzFK,OCyFtB,EDzF+B,CAAC,CAAD,ACyFF,CDzFR,CAAzB,SCyF4C,KAAK,mBAAmB,CAAC,KAAD,CAApE,EAA6E,MAAM,CAAC,IAAP,CAAY,GAAZ;AF1FhD,ACG7B,ACwFA,QDxFI,ACwFA,CDxFC,GDH8B,IE2FxB,EDxFX,EAAgB,CCwFZ,CF3F+B,CAAA,ICGZ,ACwFF,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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export const configuration = {\r\n  countriesKey: 'allCountries',\r\n  dateKey: 'dateWhenSaved',\r\n  msOfDays: 604_800_000,\r\n  numberOfPopulate: 500_000_000,\r\n};\r\n","import { Country } from './types/interfaces';\r\n\r\nexport const getCountriesData = async (): Promise<Country[]> => {\r\n  return (await fetch('https://restcountries.com/v2/all')\r\n    .then((res) => res.json())\r\n    .then((data) => data)) as Country[];\r\n};\r\n","import { configuration } from '../config';\r\nimport { getCountriesData } from '../requests';\r\nimport { Country } from '../types/interfaces';\r\n\r\nexport const Task1 = async (localStorageCountriesData: Country[]) => {\r\n  const currentDate = Date.now();\r\n\r\n  // Check if the data is in the localStorage\r\n  if (!localStorageCountriesData) {\r\n    console.log('❗ Data does not exist ❗');\r\n\r\n    // Get data from api\r\n    const countries: Country[] = await getCountriesData();\r\n\r\n    // Save countries data to LocalStorage, save\r\n    localStorage.setItem(configuration.countriesKey, JSON.stringify(countries));\r\n    localStorage.setItem(configuration.dateKey, currentDate.toString());\r\n\r\n    console.log('📝 Data saved in localStorage.');\r\n    console.log('📢 Refresh page!');\r\n  } else {\r\n    const dateFromLocalStorage: string | null = localStorage.getItem(configuration.dateKey);\r\n    const lastSaveDate: string | number = typeof dateFromLocalStorage === 'string' ? parseInt(dateFromLocalStorage) : currentDate;\r\n\r\n    const numericDateFromLocalStorage: number = lastSaveDate;\r\n    const localStorageData: Country[] = localStorageCountriesData;\r\n    const currDate: number = currentDate;\r\n    const nextUpdate: number = numericDateFromLocalStorage + configuration.msOfDays;\r\n\r\n    console.log('✔️ Data exist in localStorage ✔️');\r\n    console.log('\\n📅 Data of save:\\n\\n', new Date(numericDateFromLocalStorage));\r\n    console.log('\\n📄 localStorage data:\\n', localStorageData);\r\n\r\n    // If you exceed possiblyNextUpdateData proceed\r\n    if (currDate >= nextUpdate) {\r\n      console.log('📝 Now you updating data!');\r\n\r\n      const oldData: Country[] = localStorageData;\r\n      const newData: Country[] = await getCountriesData();\r\n\r\n      console.log('🟨 Changed data is in:\\n', compareData(oldData, newData));\r\n\r\n      localStorage.setItem(configuration.countriesKey, JSON.stringify(newData));\r\n      localStorage.setItem(configuration.dateKey, currentDate.toString());\r\n    }\r\n  }\r\n};\r\n\r\nexport const compareData = (oldest: Country[], newest: Country[]): Country[] => {\r\n  return oldest.filter((old, i) => {\r\n    if (old.alpha2Code === newest[i].alpha2Code) {\r\n      if (old.population !== newest[i].population) return old.name;\r\n    }\r\n  });\r\n};\r\n","import { configuration } from '../config';\r\nimport { Country } from '../types/interfaces';\r\n\r\nexport const Task2 = async (localStorageCountriesData: Country[]) => {\r\n  // Select all EU countries\r\n  const enterCountryValuePathToSearchFor: string = 'regionalBlocs.acronym';\r\n  const enterCountryValueToSearchFor: string = 'EU';\r\n  const whetherToContain: boolean = true;\r\n  const arrayOfCountries: Country[] | string = getAllCountriesByTypeAndValue(localStorageCountriesData, enterCountryValuePathToSearchFor, enterCountryValueToSearchFor, whetherToContain);\r\n  console.log(`\\n🔹 Countries of the ${enterCountryValueToSearchFor}: \\n`, arrayOfCountries);\r\n\r\n  // From all EU countries take countries which include any letter\r\n  const enterPhrasePathToSearchFor: string = 'name';\r\n  const enterPhraseToSearchFor: string = 'a';\r\n  const arrayOfCountriesContainingPhrase: Country[] | string = selectCountriesIncludesAnyLetter(arrayOfCountries, enterPhrasePathToSearchFor, enterPhraseToSearchFor);\r\n  console.log(`\\n🔹 Countries of the ${enterCountryValueToSearchFor}, include '${enterPhraseToSearchFor.toUpperCase()}':\\n`, arrayOfCountriesContainingPhrase);\r\n\r\n  // From all EU countries take countries which include 'a' and sort descending\r\n  const enterSortPathToSearchFor: string = 'population';\r\n  const enterSortToSearchFor: 'desc' | 'asc' = 'desc';\r\n  const arrayOfSortedCountries = sortCountriesByType(arrayOfCountriesContainingPhrase, enterSortPathToSearchFor, enterSortToSearchFor);\r\n  console.log(`\\n🔹 Countries of the ${enterCountryValueToSearchFor}, include '${enterPhraseToSearchFor.toUpperCase()}', sorted ${enterSortToSearchFor.toUpperCase()}: \\n`, arrayOfSortedCountries);\r\n\r\n  // From all EU countries take countries which include 'a', sort descending and calculate the population sum\r\n  const enterLimit: number = 5;\r\n  const enterTypeLimit = 'population';\r\n  const populateOfLimitedArray = calculateSumCountriesByType(arrayOfSortedCountries, enterTypeLimit, enterLimit);\r\n  const isBigger = populateOfLimitedArray > configuration.numberOfPopulate ? '↗️ bigger' : '↘️ less';\r\n  console.log(\r\n    `\\n🔹 Countries of the ${enterCountryValueToSearchFor}, include '${enterPhraseToSearchFor.toUpperCase()}', sorted ${enterSortToSearchFor.toUpperCase()} and calculate population ➕: \\n\\n   Population ${enterLimit} countries is equal:`,\r\n    populateOfLimitedArray,\r\n    `And it's ${isBigger} than 500 million.`\r\n  );\r\n};\r\n\r\nexport const getAllCountriesByTypeAndValue = (countries: Country[], types: string, value: string, containingOrNot: boolean) => {\r\n  const typesData = types.split('.');\r\n\r\n  return countries.filter((country: Country) => {\r\n    const arrayPath = country[typesData[0]];\r\n\r\n    if (!arrayPath) return false;\r\n\r\n    if (containingOrNot) {\r\n      if (Array.isArray(arrayPath) && typeof arrayPath[0] === 'object') return arrayPath.some((data) => data[typesData[1]] === value);\r\n      if (Array.isArray(arrayPath) && typeof arrayPath[0] === 'string') return arrayPath.includes(value);\r\n      return arrayPath === value;\r\n    } else {\r\n      if (Array.isArray(arrayPath) && typeof arrayPath[0] === 'object') return arrayPath.some((data) => data[typesData[1]] !== value);\r\n      if (Array.isArray(arrayPath) && typeof arrayPath[0] === 'string') return !arrayPath.includes(value);\r\n      return arrayPath !== value;\r\n    }\r\n  });\r\n};\r\n\r\nexport const selectCountriesIncludesAnyLetter = (countries: Country[], type: keyof Country, value: string): Country[] => {\r\n  return countries.filter((country) => country[type].toUpperCase().includes(value.toUpperCase()));\r\n};\r\n\r\nexport const sortCountriesByType = (array: Country[], type: keyof Country, enterSortType: string): Country[] => {\r\n  const sortArrayDesc = (first: any, next: any) => {\r\n    return next[type] - first[type];\r\n  };\r\n\r\n  const sortArrayAsc = (first: any, next: any) => {\r\n    return first[type] - next[type];\r\n  };\r\n\r\n  return enterSortType === 'desc' ? [...array].sort(sortArrayDesc) : [...array].sort(sortArrayAsc);\r\n};\r\n\r\nexport const calculateSumCountriesByType = (countries: Country[], type: keyof Country, limit: number): number => {\r\n  const limitedArray = countries.slice(0, limit);\r\n\r\n  let sum = 0;\r\n  limitedArray.forEach((country: Country) => {\r\n    sum += country[type];\r\n  });\r\n\r\n  return sum;\r\n};\r\n","import { getAllCountriesByTypeAndValue } from '../task2/Task2';\r\nimport { Block, CountriesStats, Country, CountryStat, LangStat, Languages } from '../types/interfaces';\r\n\r\nconst countriesStats: CountriesStats = {\r\n  EU: {\r\n    countries: [],\r\n    population: 0,\r\n    languages: {},\r\n    currencies: [],\r\n    area: 0,\r\n  },\r\n  NAFTA: {\r\n    countries: [],\r\n    population: 0,\r\n    languages: {},\r\n    currencies: [],\r\n    area: 0,\r\n  },\r\n  AU: {\r\n    countries: [],\r\n    population: 0,\r\n    languages: {},\r\n    currencies: [],\r\n    area: 0,\r\n  },\r\n  other: {\r\n    countries: [],\r\n    population: 0,\r\n    languages: {},\r\n    currencies: [],\r\n    area: 0,\r\n  },\r\n};\r\n\r\nexport const Task3 = (localStorageCountriesData: Country[]) => {\r\n  const euCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, 'regionalBlocs.acronym', 'EU', true);\r\n  const naftaCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, 'regionalBlocs.acronym', 'NAFTA', true);\r\n  const auCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, 'regionalBlocs.acronym', 'AU', true);\r\n  const countriesWithoutEuNaftaAu: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, 'regionalBlocs.acronym', 'AU EU NAFTA', false);\r\n\r\n  getCountriesDataAbout(euCountries, 'EU', countriesStats);\r\n  getCountriesDataAbout(naftaCountries, 'NAFTA', countriesStats);\r\n  getCountriesDataAbout(auCountries, 'AU', countriesStats);\r\n  getCountriesDataAbout(countriesWithoutEuNaftaAu, 'other', countriesStats);\r\n\r\n  console.log('\\n🔸 The name of the organization with the largest population:', sortObject(countriesStats, { value: 'population', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 Name of the organization with the second largest population:', sortObject(countriesStats, { value: 'population', place: 2, sort: 'desc' }));\r\n  console.log('\\n🔸 The name of the organization occupying the third largest area:', sortObject(countriesStats, { value: 'area', place: 3, sort: 'desc' }));\r\n  console.log(\r\n    '\\n🔸 Names of organizations with the largest and smallest number of languages assigned to them:\\n',\r\n    'Largest:',\r\n    sortObject(countriesStats, { value: 'languages', place: 1, sort: 'desc' }),\r\n    '\\n Smallest:',\r\n    sortObject(countriesStats, { value: 'languages', place: 1, sort: 'asc' })\r\n  );\r\n  console.log('\\n🔸 Name of the organization using the largest number of currencies:', sortObject(countriesStats, { value: 'currencies', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 The name of the organization with the fewest number of member states:', sortObject(countriesStats, { value: 'countries', place: 1, sort: 'asc' }));\r\n  console.log('\\n🔸 Native name of the language used in the greatest number of countries:', sortObjectLang(countriesStats, { value: 'area', place: 1, sort: 'desc' }));\r\n  console.log('\\n🔸 Native name of the language used by the smallest number of people:', sortObjectLang(countriesStats, { value: 'population', place: 1, sort: 'asc' }));\r\n  console.log(\r\n    '\\n🔸 Native names of the languages used in the largest and smallest area:\\n',\r\n    'Largest:',\r\n    sortObjectLang(countriesStats, { value: 'area', place: 1, sort: 'desc' }),\r\n    '\\n Smallest:',\r\n    sortObjectLang(countriesStats, { value: 'area', place: 1, sort: 'asc' })\r\n  );\r\n\r\n  console.log('\\n🟠 EU, NAFTA, AU and other countries: \\n', countriesStats);\r\n};\r\n\r\nexport const getCountriesDataAbout = (array: Country[], acronym: keyof CountriesStats, object: CountriesStats) => {\r\n  const path = object[acronym];\r\n\r\n  array.forEach((country) => {\r\n    path.countries.push(country.nativeName);\r\n    country.currencies?.every((currencie) => path.currencies.push(currencie.name));\r\n    path.population += country.population;\r\n    typeof country.area === 'number' && (path.area += country.area);\r\n\r\n    const langKeys = Object.keys(path.languages);\r\n    const countryLang = country.languages.map((lang) => lang.iso639_1);\r\n\r\n    countryLang.forEach((lang, i) => {\r\n      if (lang === langKeys[i]) {\r\n        path.languages[lang].countries.push(country.languages[i].nativeName);\r\n        path.languages[lang].name.push(country.alpha3Code);\r\n        path.languages[lang].area += country.area;\r\n        path.languages[lang].population += country.population;\r\n      } else {\r\n        const language = country.languages[i].iso639_1;\r\n        const countries = country.alpha3Code;\r\n        const name = country.languages[i].nativeName;\r\n        const area = country.area;\r\n        const population = country.population;\r\n        path.languages = { ...path.languages, ...{ [language]: { population, area, name: [name], countries: [countries] } } };\r\n      }\r\n    });\r\n  });\r\n\r\n  const unique = new Set(path.currencies);\r\n  path.currencies = Array.from(unique);\r\n  path.countries = path.countries.sort().reverse();\r\n};\r\n\r\nexport const sortObject = (object: CountriesStats, arg: { value: keyof CountryStat; place: number; sort: string }): string => {\r\n  const countryKeys = Object.keys(object);\r\n  const arrayOfValues: string[] | number[] = [];\r\n  const index = arg.place - 1;\r\n  const result: string[] = [];\r\n\r\n  countryKeys.forEach((key) => {\r\n    const value = object[key][arg.value];\r\n    const valueLength = Object.getOwnPropertyNames(value).length;\r\n    if (typeof value === 'object') arrayOfValues.push(valueLength);\r\n    if (typeof value !== 'object') arrayOfValues.push(value);\r\n  });\r\n\r\n  let sortedArrayOfValues: string[] | number[] = [];\r\n  if (arg.sort === 'desc') {\r\n    sortedArrayOfValues = arrayOfValues.sort((a: any, b: any) => b - a);\r\n  } else {\r\n    sortedArrayOfValues = arrayOfValues.sort((a: any, b: any) => a - b);\r\n  }\r\n\r\n  countryKeys.forEach((key) => {\r\n    const value = object[key][arg.value];\r\n    const valueLength = Object.getOwnPropertyNames(value).length;\r\n\r\n    if (typeof value === 'object' && valueLength === sortedArrayOfValues[index]) result.push(key);\r\n    if (typeof value !== 'object' && value === sortedArrayOfValues[index]) result.push(key);\r\n  });\r\n\r\n  return result.toString();\r\n};\r\n\r\nconst sortObjectLang = (object: CountriesStats, arg: { value: keyof LangStat; place: number; sort: string }) => {\r\n  const countryKeys = Object.keys(object);\r\n  const arrayOfValues: string[] | number[] = [];\r\n  const index = arg.place - 1;\r\n  const result: string[] = [];\r\n\r\n  countryKeys.forEach((countryKey) => {\r\n    const languagesKeys = Object.keys(object[countryKey].languages);\r\n\r\n    languagesKeys.forEach((langKey) => {\r\n      const value = object[countryKey].languages[langKey][arg.value];\r\n      const valueLength = value.length;\r\n      if (Array.isArray(value)) arrayOfValues.push(valueLength);\r\n      if (typeof value !== 'object') arrayOfValues.push(value);\r\n    });\r\n  });\r\n\r\n  let sortedArrayOfValues: string[] | number[] = [];\r\n  if (arg.sort === 'desc') {\r\n    sortedArrayOfValues = arrayOfValues.sort((a: any, b: any) => b - a);\r\n  } else {\r\n    sortedArrayOfValues = arrayOfValues.sort((a: any, b: any) => a - b);\r\n  }\r\n\r\n  countryKeys.forEach((countryKey) => {\r\n    const languagesKeys = Object.keys(object[countryKey].languages);\r\n\r\n    languagesKeys.forEach((langKey) => {\r\n      const value = object[countryKey].languages[langKey][arg.value];\r\n      const valueLength = value.length;\r\n\r\n      if (typeof value === 'object' && valueLength === sortedArrayOfValues[index]) result.push(object[countryKey].languages[langKey].name[0]);\r\n      if (typeof value !== 'object' && value === sortedArrayOfValues[index]) result.push(object[countryKey].languages[langKey].name[0]);\r\n    });\r\n  });\r\n\r\n  const set = new Set(result);\r\n  const endResult = Array.from(set);\r\n  return endResult.toString();\r\n};\r\n","import { configuration } from './config';\r\nimport { Task1 } from './task1/Task1';\r\nimport { Task2 } from './task2/Task2';\r\nimport { Task3 } from './task3/Task3';\r\n\r\nwindow.onload = () => {\r\n  const localStorageSavedData: string | null = localStorage.getItem(configuration.countriesKey);\r\n  const localStorageCountriesData = typeof localStorageSavedData === 'string' && JSON.parse(localStorageSavedData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 1     ║\\n╚═══════════════╝');\r\n  Task1(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 2     ║\\n╚═══════════════╝');\r\n  Task2(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 3     ║\\n╚═══════════════╝');\r\n  Task3(localStorageCountriesData);\r\n\r\n  console.log('╔═══════════════╗\\n║     Logs      ║\\n╚═══════════════╝');\r\n};\r\n"]}