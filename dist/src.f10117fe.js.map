{"version":3,"sources":["src/helpers/Requests.ts","src/task1/Task1.ts","src/task2/Task2.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["export const CountriesData = async () => {\r\n  return await fetch('https://restcountries.com/v2/all')\r\n    .then((res) => res.json())\r\n    .then((data) => data);\r\n};\r\n","import { CountriesData } from '../helpers/Requests';\r\nimport { Country } from '../types/interfaces';\r\n\r\nexport const Task1 = async () => {\r\n  const configuration = {\r\n    countriesKey: 'allCountries',\r\n    dateKey: 'dateWhenSaved',\r\n  };\r\n\r\n  const localStorageSavedData: string | null = localStorage.getItem(configuration.countriesKey);\r\n  const localStorageCountriesData = typeof localStorageSavedData === 'string' && JSON.parse(localStorageSavedData);\r\n\r\n  const currentDate = Date.now();\r\n  const msOf7Days = 604_800_000;\r\n\r\n  // Check if the data is in the localStorage\r\n  if (!localStorageCountriesData) {\r\n    console.log('❗ Data does not exist ❗');\r\n\r\n    // Get data from api\r\n    const countries: Country[] = await CountriesData();\r\n\r\n    // Save countries data to LocalStorage, save\r\n    localStorage.setItem(configuration.countriesKey, JSON.stringify(countries));\r\n    localStorage.setItem(configuration.dateKey, currentDate.toString());\r\n\r\n    console.log('\\n📝 Data saved in localStorage.');\r\n  } else {\r\n    const dateFromLocalStorage: string | null = localStorage.getItem(configuration.dateKey);\r\n    const lastSaveDate: string | number = typeof dateFromLocalStorage === 'string' ? parseInt(dateFromLocalStorage) : currentDate;\r\n\r\n    const numericDateFromLocalStorage: number = lastSaveDate;\r\n    const localStorageData: Country[] = localStorageCountriesData;\r\n    const currDate: number = currentDate;\r\n    const nextUpdate: number = numericDateFromLocalStorage + msOf7Days;\r\n\r\n    console.log('✔️ Data exist in localStorage ✔️');\r\n    console.log('\\n📅 Data of save:\\n\\n', new Date(numericDateFromLocalStorage));\r\n    console.log('\\n📄 localStorage data:\\n', localStorageData);\r\n\r\n    // If you exceed possiblyNextUpdateData proceed\r\n    if (currDate >= nextUpdate) {\r\n      console.log('📝 Now you updating data!');\r\n\r\n      const oldData: Country[] = localStorageData;\r\n      const newData: Country[] = await CountriesData();\r\n\r\n      console.log('🟨 Changed data is in:\\n', compareData(oldData, newData));\r\n\r\n      localStorage.setItem(configuration.countriesKey, JSON.stringify(newData));\r\n      localStorage.setItem(configuration.dateKey, currentDate.toString());\r\n    }\r\n  }\r\n};\r\n\r\nexport const compareData = (oldest: Country[], newest: Country[]): string[] => {\r\n  const changedData: string[] = [];\r\n\r\n  oldest.forEach((old, i) => {\r\n    if (old.alpha2Code === newest[i].alpha2Code) {\r\n      old.population !== newest[i].population ? changedData.push(old.name) : null;\r\n    }\r\n  });\r\n\r\n  return changedData;\r\n};\r\n","import { Country } from '../types/interfaces';\r\n\r\nexport const Task2 = async () => {\r\n  const localStorageSavedData: string | null = localStorage.getItem('allCountries');\r\n  const localStorageCountriesData = typeof localStorageSavedData === 'string' && JSON.parse(localStorageSavedData);\r\n\r\n  // Select all EU countries\r\n  const arrayWithEUCountries: Country[] | string = getAllEUCountries(localStorageCountriesData);\r\n  console.log('\\n🔹 Countries of the 🇪🇺: \\n', arrayWithEUCountries);\r\n\r\n  // From all EU countries take countries which include 'a'\r\n  const arrayOfEUCountriesIncludesA: Country[] | string = selectCountriesIncludesA(arrayWithEUCountries);\r\n  console.log('\\n🔹 Countries of the 🇪🇺 include 🅰:\\n', arrayOfEUCountriesIncludesA);\r\n\r\n  // From all EU countries take countries which include 'a' and sort descending\r\n  const sortedArray = sortByPopulationDesc(arrayOfEUCountriesIncludesA);\r\n  console.log('\\n🔹 Countries of the 🇪🇺 include 🅰, sorted 📉: \\n', sortedArray);\r\n\r\n  // From all EU countries take countries which include 'a', sort descending and calculate the population sum\r\n  const limitedSortedArray = sortedArray.slice(0, 5);\r\n  const populateOfLimitedArray = calculateSum5MostPopulateCountries(limitedSortedArray);\r\n  const isBigger = populateOfLimitedArray > 500_000_000 ? '↗️ bigger' : '↘️ less';\r\n  console.log(\r\n    '\\n🔹 Countries of the 🇪🇺 include 🅰, sorted 📉 and calculate population ➕: \\n\\n   Population 5 most populous countries is equal:',\r\n    populateOfLimitedArray,\r\n    `And it's ${isBigger} than 500 million.`\r\n  );\r\n};\r\n\r\nexport const getAllEUCountries = (countries: Country[]): Country[] => {\r\n  const arrayOfEUCountries = countries.filter((country) => {\r\n    return country.regionalBlocs?.some((c) => c.acronym === 'EU');\r\n  });\r\n\r\n  return arrayOfEUCountries;\r\n};\r\n\r\nexport const selectCountriesIncludesA = (countries: Country[]): Country[] => {\r\n  const arrayCountriesIncludeA: Country[] = countries.filter((country) => country.name.includes('a'));\r\n\r\n  return arrayCountriesIncludeA;\r\n};\r\n\r\nexport const sortByPopulationDesc = (array: Country[]): Country[] => {\r\n  const sortArrayDesc = (first: Country, next: Country) => {\r\n    return next.population - first.population;\r\n  };\r\n\r\n  const sortArray: Country[] = [...array];\r\n  sortArray.sort(sortArrayDesc);\r\n\r\n  return sortArray;\r\n};\r\n\r\nexport const calculateSum5MostPopulateCountries = (array: Country[]): number => {\r\n  let populate = 0;\r\n  array.forEach((country) => {\r\n    populate += country.population;\r\n  });\r\n\r\n  return populate;\r\n};\r\n","import { Task1 } from './task1/Task1';\r\nimport { Task2 } from './task2/Task2';\r\n\r\nwindow.onload = () => {\r\n  console.log('╔═══════════════╗\\n║    Task 1     ║\\n╚═══════════════╝');\r\n  Task1();\r\n\r\n  console.log('╔═══════════════╗\\n║    Task 2     ║\\n╚═══════════════╝');\r\n  Task2();\r\n\r\n  console.log('╔═══════════════╗\\n║     Logs      ║\\n╚═══════════════╝');\r\n};\r\n\r\nconsole.log();\r\n"]}