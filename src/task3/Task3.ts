import { getAllCountriesByTypeAndValue, sortCountriesByType } from '../task2/Task2';
import { Acronyms, Country } from '../types/interfaces';

export const Task3 = (localStorageCountriesData: Country[]) => {
  const acronyms: Acronyms = {
    EU: {
      countries: [],
      population: 0,
      languages: {},
      currencies: [],
      area: 0,
    },
    NAFTA: {
      countries: [],
      population: 0,
      languages: {},
      currencies: [],
      area: 0,
    },
    AU: {
      countries: [],
      population: 0,
      languages: {},
      currencies: [],
      area: 0,
    },
    other: {
      countries: [],
      population: 0,
      languages: {},
      currencies: [],
      area: 0,
    },
  };

  const euCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, 'regionalBlocs.acronym', 'EU', true);
  const naftaCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, 'regionalBlocs.acronym', 'NAFTA', true);
  const auCountries: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, 'regionalBlocs.acronym', 'AU', true);
  const countriesWithoutEuNaftaAu: Country[] = getAllCountriesByTypeAndValue(localStorageCountriesData, 'regionalBlocs.acronym', 'AU EU NAFTA', false);

  getCountriesDataAbout(euCountries, 'EU', acronyms);
  getCountriesDataAbout(naftaCountries, 'NAFTA', acronyms);
  getCountriesDataAbout(auCountries, 'AU', acronyms);
  getCountriesDataAbout(countriesWithoutEuNaftaAu, 'other', acronyms);

  console.log('\nğŸ”¸ The name of the organization with the largest population:', sortObject(acronyms, { value: 'population', place: 1, sort: 'desc' }));
  console.log('\nğŸ”¸ Name of the organization with the second largest population:', sortObject(acronyms, { value: 'population', place: 2, sort: 'desc' }));
  console.log('\nğŸ”¸ The name of the organization occupying the third largest area:', sortObject(acronyms, { value: 'area', place: 3, sort: 'desc' }));
  console.log(
    '\nğŸ”¸ Names of organizations with the largest and smallest number of languages assigned to them:\n',
    'Largest:',
    sortObject(acronyms, { value: 'languages', place: 1, sort: 'desc' }),
    '\n Smallest:',
    sortObject(acronyms, { value: 'languages', place: 1, sort: 'asc' })
  );
  console.log('\nğŸ”¸ Name of the organization using the largest number of currencies:', sortObject(acronyms, { value: 'currencies', place: 1, sort: 'desc' })); //currencies need to add
  console.log('\nğŸ”¸ The name of the organization with the fewest number of member states:', sortObject(acronyms, { value: 'countries', place: 1, sort: 'asc' }));

  console.log('\nğŸ”¸ EU, NAFTA, AU and other countries: \n', acronyms);
};

export const getCountriesDataAbout = (array: Country[], acronym: keyof Acronyms, acronyms: Acronyms) => {
  const path = acronyms[acronym];

  array.forEach((country) => {
    path.countries.push(country.nativeName);
    country.currencies?.every((currencie) => path.currencies.push(currencie.name));
    path.population += country.population;
    typeof country.area === 'number' && (path.area += country.area);

    const langKeys = Object.keys(path.languages);
    const countryLang = country.languages.map((lang) => lang.iso639_1);

    countryLang.forEach((lang, i) => {
      if (lang === langKeys[i]) {
        path.languages[lang].countries.push(country.languages[i].nativeName);
        path.languages[lang].name.push(country.alpha3Code);
        path.languages[lang].area += country.area;
        path.languages[lang].population += country.population;
      } else {
        const language = country.languages[i].iso639_1;
        const countries = country.alpha3Code;
        const name = country.languages[i].nativeName;
        const area = country.area;
        const population = country.population;
        path.languages = { ...path.languages, ...{ [language]: { population, area, name: [name], countries: [countries] } } };
      }
    });
  });

  const unique = new Set(path.currencies);
  path.currencies = Array.from(unique);
  path.countries = path.countries.sort().reverse();
};

export const sortObject = (object: Acronyms, arg: { value: string; place: number; sort: string }) => {
  const langKeys = Object.keys(object);
  const array: string[] | number[] = [];
  const index = arg.place - 1;
  const result: string[] = [];

  langKeys.forEach((key) => {
    const value = object[key][arg.value];
    const valueLength = Object.getOwnPropertyNames(value).length;
    if (typeof value === 'object') array.push(valueLength);
    if (typeof value !== 'object') array.push(value);
  });

  let sortedArray: any = [];
  if (arg.sort === 'desc') {
    sortedArray = array.sort((a: any, b: any) => b - a);
  } else {
    sortedArray = array.sort((a: any, b: any) => a - b);
  }

  langKeys.forEach((key) => {
    const value = object[key][arg.value];
    const valueLength = Object.getOwnPropertyNames(value).length;

    if (typeof value === 'object' && valueLength === sortedArray[index]) result.push(key);
    if (typeof value !== 'object' && value === sortedArray[index]) result.push(key);
  });

  return result.toString();
};

/*
âœ” * StwÃ³rz nowy obiekt. Powinien on posiadaÄ‡ klucze EU, NAFTA, AU oraz other. KaÅ¼dy z tych kluczy bÄ™dzie zawieraÅ‚ obiekt o kluczach countries, population, languages oraz currencies.
  WartoÅ›ciami countries oraz currencies sÄ… puste tablice, wartoÅ›Ä‡ population wynosi 0. WartoÅ›Ä‡ languages to pusty obiekt.
âœ” * W TP znajdÅº kraje naleÅ¼Ä…ce do EU, NAFTA albo AU. JeÅ›li paÅ„stwo naleÅ¼y do ktÃ³rejÅ› z tych grup, umieÅ›Ä‡ jego dane w stosownym obiekcie: natywnÄ… nazwÄ™ w tablicy countries, uÅ¼ywane przez niÄ…
  waluty w tablicy currencies oraz dodaj jej populacjÄ™ do wartoÅ›ci population.
âœ” * SprawdÅº jÄ™zyki przypisane do kraju. UÅ¼yj ich kodu iso639_1 jako klucza dla obiektu languages. JeÅ›li danego jÄ™zyka nie ma w obiekcie languages, przypisz do niego nowy obiekt o kluczach
  countries(wartoÅ›Ä‡ poczÄ…tkowa: pusta arajka), population(0), area(0) oraz name(pusty string). JeÅ›li dany jÄ™zyk znajduje siÄ™ w obiekcie languages, dodaj do tablicy countries kod alpha3code
  kraju, w ktÃ³rym jest uÅ¼ywany, populacjÄ™ tego kraju do wartoÅ›ci population, obszar kraju do wartoÅ›ci area, a do name przypisz natywnÄ… nazwÄ™ tego jÄ™zyka.
âœ” * JeÅ›li kraj nie naleÅ¼y do Å¼adnej z podanych wczeÅ›niej organizacji wykonaj kroki z poprzednich dwÃ³ch punktÃ³w, ale dane umieÅ›Ä‡ w tablicy other.
âœ” * JeÅ›li kraj naleÅ¼y do wiÄ™cej, niÅ¼ jednej organizacji, umieÅ›Ä‡ jego dane we wszystkich pasujÄ…cych obiektach blokÃ³w. Blok other moÅ¼e siÄ™ powtarzaÄ‡.
âœ” * Dla kaÅ¼dej organizacji dane w tablicy currencies nie mogÄ… siÄ™ powtarzaÄ‡.
âœ” * Dla kaÅ¼dej organizacji dane w tablicy countries powinny byÄ‡ posortowane alfabetycznie z do a.
* WyÅ›wietl w konsoli:
 âœ”- NazwÄ™ organizacji o najwiÄ™kszej populacji,
 âœ”- NazwÄ™ organizacji o drugiej najwiÄ™kszej gÄ™stoÅ›ci zaludnienia,
 âœ”- NazwÄ™ organizacji zajmujÄ…cej trzeci najwiÄ™kszy obszar,
 âœ”- Nazwy organizacji o najwiÄ™kszej i najmniejszej przypisanej do nich liczbie jÄ™zykÃ³w,
 âœ”- NazwÄ™ organizacji wykorzystujÄ…cej najwiÄ™kszÄ… liczbÄ™ walut,
 âœ”- NazwÄ™ organizacji posiadajÄ…cej najmniejszÄ… liczbÄ™ paÅ„stw czÅ‚onkowskich,
 - NatywnÄ… nazwÄ™ jÄ™zyka wykorzystywanego w najwiÄ™kszej liczbie krajÃ³w,
 - NatywnÄ… nazwÄ™ jÄ™zyka wykorzystywanego przez najmniejszÄ… liczbÄ™ ludzi,
 - Natywne nazwy jÄ™zykÃ³w wykorzystywanych na najwiÄ™kszym i najmniejszym obszarze.
* W przypadku remisÃ³w wyÅ›wietl wszystkich zwyciÄ™zcÃ³w.
*/
